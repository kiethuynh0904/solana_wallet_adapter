{"version":3,"sources":["model/metadata.ts","model/GreetingAccount.ts","config/index.ts","model/game_rule.ts","api/account.tsx","constants/defaultWallet.ts","api/transaction.tsx","utils/index.tsx","utils/nftCreation.ts","pages/game/game.container.tsx","pages/game/gamestart.container.tsx","components/NotificationToastify.tsx","constants/toastifyOptions.tsx","helper/index.tsx","api/staking.tsx","api/nft.tsx","api/auth.tsx","slices/authSlice.ts","pages/home/home.container.tsx","pages/wallet/wallet.container.tsx","pages/withdraw/withdraw.container.tsx","hooks/useSolanaBalance.tsx","pages/deposit/deposit.container.tsx","hooks/useNotification.tsx","components/RequestAirdropBtn.tsx","pages/settings/setting.container.tsx","pages/createNFT/createNFT.container.tsx","components/Navbar.tsx","components/CardSkeleton.tsx","pages/metaplex/metaplex.container.tsx","pages/staking/staking.container.tsx","pages/error/error.container.tsx","api/feedback.tsx","pages/feedback/feedback.container.tsx","router/Navigation.tsx","providers/SolanaWalletProvider.tsx","App.tsx","reportWebVitals.ts","slices/couterSlice.ts","store.ts","index.tsx"],"names":["MetadataKey","programIds","token","PublicKey","associatedToken","metadata","memo","METADATA_PREFIX","EDITION","MasterEditionV1","args","key","supply","maxSupply","printingMint","oneTimePrintingAuthorizationMint","this","MasterEditionV2","EditionMarker","ledger","edition","editionOffset","indexOffset","Math","floor","Error","positionInBitsetFromRight","mask","pow","Edition","parent","EditionV1","Creator","address","verified","share","Data","name","symbol","uri","sellerFeeBasisPoints","creators","Metadata","updateAuthority","mint","data","primarySaleHappened","isMutable","editionNonce","masterEdition","MetadataV1","getEdition","CreateMetadataArgs","instruction","UpdateMetadataArgs","CreateMasterEditionArgs","METADATA_SCHEMA","Map","kind","fields","type","tokenMint","a","findProgramAddress","Buffer","from","toBuffer","createMasterEdition","mintKey","updateAuthorityKey","mintAuthorityKey","payer","instructions","metadataProgramId","metadataAccount","editionAccount","value","serialize","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","push","TransactionInstruction","createMetadata","txnData","updateMetadata","newUpdateAuthority","undefined","GreetingAccount","counter","highest_trans","GreetingSchema","GREETING_SIZE","borsh","length","PROGRAM_PATH","path","resolve","__dirname","console","log","join","PROGRAM_SO_PATH","PAYER_PATH","PAYER_KEYPAIR_PATH","publicKey","property","BufferLayout","GAME_RULE_ACCOUNT_DATA_LAYOUT","getDefaultAccount","decoded","bs58","decode","Keypair","fromSecretKey","connection","greetedPubkey","establishConnection","Connection","clusterApiUrl","getVersion","version","establishPayer","fees","getRecentBlockhash","feeCalculator","getMinimumBalanceForRentExemption","lamportsPerSignature","getPayer","getBalance","lamports","toBase58","LAMPORTS_PER_SOL","checkProgram","getAccountInfo","programInfo","fs","existsSync","executable","GREETING_SEED","createWithSeed","transaction","Transaction","add","createAccountWithSeed","fromPubkey","basePubkey","seed","newAccountPubkey","space","sendAndConfirmTransaction","reportGreetings","accountInfo","greeting","withdrawToWallet","toPubkey","amount","defaultAccount","AccountAPI","BN","toArray","signature","transfer","sendTransaction","toast","info","message","defaultToastOptions","confirmTransaction","success","setTimeout","error","withdrawTokenToWallet","mintTokenAddress","process","myToken","splToken","getOrCreateAssociatedAccountInfo","fromTokenAccount","toTokenAccount","createTransferInstruction","depositFromWallet","result","NETWORK","PROGRAM_KEY","idl","generate","seeds","sleepUtil","ms","Promise","getProgram","provider","Program","TOKEN_PROGRAM_ID","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","MEMO_ID","AR_SOL_HOLDER_ID","RESERVED_TXN_MANIFEST","BinaryReader","prototype","readPubkey","array","readFixedArray","BinaryWriter","writePubkey","writeFixedArray","readPubkeyAsString","base58","encode","writePubkeyAsString","mintNFT","wallet","env","files","progressCallback","metadataContent","description","attributes","seller_fee_basis_points","image","animation_url","external_url","properties","map","creator","realFiles","File","JSON","stringify","prepPayForFilesTxn","pushInstructions","pushSigners","signers","span","mintRent","payerPublicKey","createMint","recipientKey","createAssociatedTokenAccountInstruction","classData","repeat","sendTransactionWithRetry","txid","getParsedConfirmedTransaction","FormData","tags","reduce","acc","f","append","fetch","method","body","json","metadataFile","messages","find","m","filename","arweaveLink","transactionId","updateInstructions","updateSigners","createMintToInstruction","account","i","hashSum","crypto","createHash","text","update","hex","digest","mintRentExempt","decimals","owner","freezeAuthority","createAccount","createUninitializedMint","createInitMintInstruction","associatedTokenAddress","walletAddress","splTokenMintAddress","commitment","includesFeePayer","block","beforeSend","forEach","recentBlockhash","blockhash","setSigners","s","partialSign","signTransaction","sendSignedTransaction","signedTransaction","slot","getUnixTs","Date","getTime","timeout","rawTransaction","startTime","sendRawTransaction","skipPreflight","done","awaitTransactionSignatureConfirmation","confirmation","err","queryStatus","status","confirmations","subId","reject","onSignature","context","e","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","removeSignatureListener","GAME_RULE_PROGRAM_ID","confirm","Modal","Text","Typography","Title","GameplayContainer","useWallet","useState","setGamePubkey","isSpinning","setIsSpinning","navigate","useNavigate","initGameRule","Token","getAssociatedTokenAddress","ASSOCIATED_TOKEN_PROGRAM_ID","fromTokenAccountAddress","toString","InitializerMortgageAccountKeypair","AccountLayout","createInitializerMortgageAccount","initMortgageAccount","createInitAccountInstruction","transferTokensToMortgageAccount","gameRuleKeypair","createGameRuleAccount","Uint8Array","of","preflightCommitment","state","gameRulePubkey","size","spinning","style","padding","paddingTop","paddingBottom","height","justify","align","mark","variant","onClick","title","strong","icon","content","okText","onOk","onCancel","GameStartContainer","hostAccount","hostAccountPubkey","useLocation","gameRuleStateAccountPubkey","setGameRuleStateAccountPubkey","showBackButton","setShowBackButton","useEffect","winnerID","setWinnerID","showConfirm","oldInitBalance","initBalance","level","toUpperCase","cancelButtonProps","hidden","startGame","winnerPubkey","hostSendingOrReiceiveTokenAccountAddress","gameRuleAccount","encodedGameRuleState","decodedGameRuleState","gameRuleState","gameRuleAccountPubkey","isInitialized","is_initialized","initializerAccountPubkey","initializer_pubkey","initializerMortgageAccountPubkey","initializer_mortgage_token_account_pubkey","initializerTokenToReceiveAccountPubkey","initializer_token_to_receive_account_pubkey","PDA","exchangeInstruction","all","getTokenBalance","initTokenBalance","hostTokenBalance","player","host","newInitTokenBalance","newHostTokenBalance","Group","onChange","target","direction","marginTop","danger","useStyles","makeStyles","notification","display","alignItems","fontSize","link","color","marginLeft","textDecoration","NotificationToastify","props","styles","className","href","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","_pubKey","sol","getParsedTokenAccountsByOwner","xmtTokens","parsed","tokenAmount","uiAmount","maskedAddress","slice","getUserKey","walletKey","fromSeed","TextEncoder","getAvatarUrl","md5","stakeAccount","stakingConnection","amountLamportsStaking","authorizedAccount","Authorized","StakeProgram","lamportsForStakeAccount","createAccountTransaction","authorized","lockup","Lockup","stakePubkey","getVoteAccounts","voteAccounts","voteAccount","current","concat","delinquent","votePubkey","delegateTransaction","delegate","authorizedPubkey","voteSignature","getStakeActivation","stakeBalance","stakeState","defaultAcc","buyNFT","receiver","mintAddress","signup","anchorWallet","userAccount","anchor","program","avatar","rpc","signupUser","accounts","authority","systemProgram","updateUser","tx","fetchUser","userState","_user","user","id","authSlice","createSlice","initialState","reducers","saveUser","action","payload","clearUser","actions","HomeContainer","useAnchorWallet","dispatch","useDispatch","useSelector","auth","onFinish","values","username","getUser","xs","lg","md","labelCol","wrapperCol","initialValues","remember","onFinishFailed","errorInfo","autoComplete","layout","Item","label","rules","required","htmlType","WalletContainer","pathname","Fragment","CssBaseline","Container","maxWidth","Stack","sx","minWidth","justifyContent","spacing","Button","initialSOL","xmt","WithdrawContainer","balance","setBalance","sendAmount","setSendAmount","customAddress","setCustomAddress","checked","symbolType","setSymbolType","getAsyncBalance","init","TransactionAPI","useCallback","finally","Card","CardContent","gutterBottom","textAlign","FormControl","fullWidth","TextField","placeholder","marginBottom","disabled","InputLabelProps","shrink","defaultValue","event","select","helperText","MenuItem","toFixed","CardActions","DepositContainer","useConnection","myInterval","setInterval","clearInterval","useSolanaBalance","copied","setCopied","depositAmount","width","InputProps","readOnly","onCopy","Tooltip","IconButton","useNotify","enqueueSnackbar","useSnackbar","Link","RequestAirdropBtn","notify","requestAirdrop","SettingContainer","Dragger","Upload","Step","Steps","CreateNFTContainer","coverFile","setCoverFile","coverArtError","setCoverArtError","nftCreateProgress","setNFTcreateProgress","Form","useForm","form","category","setAttributes","setIconForStep","currentStep","componentStep","LoadingOutlined","mintNFTHandler","nftAttributes","ownerPublicKey","selfCreator","tip","flexDirection","accept","background","maxHeight","multiple","fileList","customRequest","onSuccess","file","originFileObj","sizeKB","round","onDrop","dataTransfer","fontWeight","autoFocus","borderRadius","maxLength","allowClear","TextArea","minHeight","val","List","remove","hasFeedback","MinusCircleOutlined","PlusOutlined","validateFields","then","nftAttribute","newValue","Number","isNaN","theme","navlinks","flexGrow","logo","cursor","transition","Navbar","classes","useTheme","connected","disconnecting","connecting","popoverVisible","setPopoverVisible","CustomLink","children","to","resolved","useResolvedPath","match","useMatch","end","ThemeProvider","AppBar","backgroundColor","Toolbar","marginRight","src","onVisibleChange","visible","placement","trigger","CardSkeleton","displayNumber","list","Array","item","index","Grid","xl","bgcolor","CardHeader","Skeleton","animation","CardActionArea","Box","component","MetaplexContainer","ownedMetadata","setOwnedMetadata","NFTList","setNFTList","loading","setLoading","fetchData","URL","axios","get","response","catch","findDataByOwner","awareUri","ownedFullMetadata","NFTCardItem","pr","pl","Avatar","alt","CardMedia","overflow","WebkitBoxOrient","WebkitLineClamp","mint_string_address","mint_address","NFT","pt","container","StakingContainer","stakeAmount","setStakeAmount","handleStake","Staking","FEEDBACK_KEY","feedbackState","feedback","currentPostKey","feedbackAccount","genesisPostAccount","initFeedback","createPost","postAccount","Input","FeedBackContainer","warning","resetFields","bordered","showCount","borderColor","Navigation","element","SolanaWalletProvider","network","WalletAdapterNetwork","Devnet","endpoint","useMemo","wallets","getPhantomWallet","getSolletWallet","onError","ConnectionProvider","WalletProvider","autoConnect","App","newestOnTop","rtl","pauseOnFocusLoss","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","counterSlice","increment","decrement","incrementByAmount","rootReducer","combineReducers","authReducer","counterReducer","persistConfig","storage","localforage","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4df32890.chunk.js","sourcesContent":["import BN from \"bn.js\";\nimport { findProgramAddress } from \"../utils/index\";\nimport { serialize } from \"borsh\";\n\nimport {\n  PublicKey,\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\n\nexport type StringPublicKey = string;\nexport const TOKEN_PROGRAM_ID = new PublicKey(\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n);\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nconst METADATA_PROGRAM_ID = \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\";\n\nconst MEMO_ID = new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\");\n\nconst programIds = {\n  token: TOKEN_PROGRAM_ID,\n  associatedToken: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  metadata: METADATA_PROGRAM_ID,\n  memo: MEMO_ID,\n};\nexport const METADATA_PREFIX = \"metadata\";\nexport const EDITION = \"edition\";\nexport const EDITION_MARKER_BIT_SIZE = 248;\nexport const DEFAULT_TIMEOUT = 15000;\nexport const RESERVED_TXN_MANIFEST = \"manifest.json\";\n\nexport enum MetadataKey {\n  Uninitialized = 0,\n  MetadataV1 = 4,\n  EditionV1 = 1,\n  MasterEditionV1 = 2,\n  MasterEditionV2 = 6,\n  EditionMarker = 7,\n}\n\nexport type MetadataFile = {\n  uri: string;\n  type: string;\n};\n\nexport type Attribute = {\n  trait_type?: string;\n  display_type?: string;\n  value: string | number;\n};\n\nexport interface IMetadataExtension {\n  name: string;\n  symbol: string;\n\n  creators: Creator[] | null;\n  description: string;\n  // preview image absolute URI\n  image: string;\n  animation_url?: string;\n\n  attributes?: Attribute[];\n\n  // stores link to item on meta\n  external_url: string;\n\n  seller_fee_basis_points: number;\n\n  properties: {\n    files?: (MetadataFile | string)[];\n    category: \"image\";\n    maxSupply?: number;\n    creators?: {\n      address: string;\n      shares: number;\n    }[];\n  };\n}\n\nexport class MasterEditionV1 {\n  key: MetadataKey;\n  supply: BN;\n  maxSupply?: BN;\n  printingMint: StringPublicKey;\n\n  oneTimePrintingAuthorizationMint: StringPublicKey;\n\n  constructor(args: {\n    key: MetadataKey;\n    supply: BN;\n    maxSupply?: BN;\n    printingMint: StringPublicKey;\n    oneTimePrintingAuthorizationMint: StringPublicKey;\n  }) {\n    this.key = MetadataKey.MasterEditionV1;\n    this.supply = args.supply;\n    this.maxSupply = args.maxSupply;\n    this.printingMint = args.printingMint;\n    this.oneTimePrintingAuthorizationMint =\n      args.oneTimePrintingAuthorizationMint;\n  }\n}\n\nexport class MasterEditionV2 {\n  key: MetadataKey;\n  supply: BN;\n  maxSupply?: BN;\n\n  constructor(args: { key: MetadataKey; supply: BN; maxSupply?: BN }) {\n    this.key = MetadataKey.MasterEditionV2;\n    this.supply = args.supply;\n    this.maxSupply = args.maxSupply;\n  }\n}\n\nexport class EditionMarker {\n  key: MetadataKey;\n  ledger: number[];\n\n  constructor(args: { key: MetadataKey; ledger: number[] }) {\n    this.key = MetadataKey.EditionMarker;\n    this.ledger = args.ledger;\n  }\n\n  editionTaken(edition: number) {\n    const editionOffset = edition % EDITION_MARKER_BIT_SIZE;\n    const indexOffset = Math.floor(editionOffset / 8);\n\n    if (indexOffset > 30) {\n      throw Error(\"bad index for edition\");\n    }\n\n    const positionInBitsetFromRight = 7 - (editionOffset % 8);\n\n    const mask = Math.pow(2, positionInBitsetFromRight);\n\n    const appliedMask = this.ledger[indexOffset] & mask;\n\n    return appliedMask != 0;\n  }\n}\n\nexport class Edition {\n  key: MetadataKey;\n  /// Points at MasterEdition struct\n  parent: StringPublicKey;\n  /// Starting at 0 for master record, this is incremented for each edition minted.\n  edition: BN;\n\n  constructor(args: {\n    key: MetadataKey;\n    parent: StringPublicKey;\n    edition: BN;\n  }) {\n    this.key = MetadataKey.EditionV1;\n    this.parent = args.parent;\n    this.edition = args.edition;\n  }\n}\nexport class Creator {\n  address: StringPublicKey;\n  verified: boolean;\n  share: number;\n\n  constructor(args: {\n    address: StringPublicKey;\n    verified: boolean;\n    share: number;\n  }) {\n    this.address = args.address;\n    this.verified = args.verified;\n    this.share = args.share;\n  }\n}\n\nexport class Data {\n  name: string;\n  symbol: string;\n  uri: string;\n  sellerFeeBasisPoints: number;\n  creators: Creator[] | null;\n  constructor(args: {\n    name: string;\n    symbol: string;\n    uri: string;\n    sellerFeeBasisPoints: number;\n    creators: Creator[] | null;\n  }) {\n    this.name = args.name;\n    this.symbol = args.symbol;\n    this.uri = args.uri;\n    this.sellerFeeBasisPoints = args.sellerFeeBasisPoints;\n    this.creators = args.creators;\n  }\n}\n\nexport class Metadata {\n  key: MetadataKey;\n  updateAuthority: StringPublicKey;\n  mint: StringPublicKey;\n  data: Data;\n  primarySaleHappened: boolean;\n  isMutable: boolean;\n  editionNonce: number | null;\n\n  // set lazy\n  masterEdition?: StringPublicKey;\n  edition?: StringPublicKey;\n\n  constructor(args: {\n    updateAuthority: StringPublicKey;\n    mint: StringPublicKey;\n    data: Data;\n    primarySaleHappened: boolean;\n    isMutable: boolean;\n    editionNonce: number | null;\n  }) {\n    this.key = MetadataKey.MetadataV1;\n    this.updateAuthority = args.updateAuthority;\n    this.mint = args.mint;\n    this.data = args.data;\n    this.primarySaleHappened = args.primarySaleHappened;\n    this.isMutable = args.isMutable;\n    this.editionNonce = args.editionNonce ?? null;\n  }\n\n  public async init() {\n    this.edition = await getEdition(this.mint);\n    this.masterEdition = this.edition;\n  }\n}\n\nclass CreateMetadataArgs {\n  instruction: number = 0;\n  data: Data;\n  isMutable: boolean;\n\n  constructor(args: { data: Data; isMutable: boolean }) {\n    this.data = args.data;\n    this.isMutable = args.isMutable;\n  }\n}\nclass UpdateMetadataArgs {\n  instruction: number = 1;\n  data: Data | null;\n  // Not used by this app, just required for instruction\n  updateAuthority: StringPublicKey | null;\n  primarySaleHappened: boolean | null;\n  constructor(args: {\n    data?: Data;\n    updateAuthority?: string;\n    primarySaleHappened: boolean | null;\n  }) {\n    this.data = args.data ? args.data : null;\n    this.updateAuthority = args.updateAuthority ? args.updateAuthority : null;\n    this.primarySaleHappened = args.primarySaleHappened;\n  }\n}\n\nclass CreateMasterEditionArgs {\n  instruction: number = 10;\n  maxSupply: BN | null;\n  constructor(args: { maxSupply: BN | null }) {\n    this.maxSupply = args.maxSupply;\n  }\n}\n\nclass MintPrintingTokensArgs {\n  instruction: number = 9;\n  supply: BN;\n\n  constructor(args: { supply: BN }) {\n    this.supply = args.supply;\n  }\n}\n\nexport const METADATA_SCHEMA = new Map<any, any>([\n  [\n    CreateMetadataArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"data\", Data],\n        [\"isMutable\", \"u8\"], // bool\n      ],\n    },\n  ],\n  [\n    UpdateMetadataArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"data\", { kind: \"option\", type: Data }],\n        [\"updateAuthority\", { kind: \"option\", type: \"pubkeyAsString\" }],\n        [\"primarySaleHappened\", { kind: \"option\", type: \"u8\" }],\n      ],\n    },\n  ],\n\n  [\n    CreateMasterEditionArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"maxSupply\", { kind: \"option\", type: \"u64\" }],\n      ],\n    },\n  ],\n  [\n    MintPrintingTokensArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"supply\", \"u64\"],\n      ],\n    },\n  ],\n  [\n    MasterEditionV1,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"supply\", \"u64\"],\n        [\"maxSupply\", { kind: \"option\", type: \"u64\" }],\n        [\"printingMint\", \"pubkeyAsString\"],\n        [\"oneTimePrintingAuthorizationMint\", \"pubkeyAsString\"],\n      ],\n    },\n  ],\n  [\n    MasterEditionV2,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"supply\", \"u64\"],\n        [\"maxSupply\", { kind: \"option\", type: \"u64\" }],\n      ],\n    },\n  ],\n  [\n    Edition,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"parent\", \"pubkeyAsString\"],\n        [\"edition\", \"u64\"],\n      ],\n    },\n  ],\n  [\n    Data,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"name\", \"string\"],\n        [\"symbol\", \"string\"],\n        [\"uri\", \"string\"],\n        [\"sellerFeeBasisPoints\", \"u16\"],\n        [\"creators\", { kind: \"option\", type: [Creator] }],\n      ],\n    },\n  ],\n  [\n    Creator,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"address\", \"pubkeyAsString\"],\n        [\"verified\", \"u8\"],\n        [\"share\", \"u8\"],\n      ],\n    },\n  ],\n  [\n    Metadata,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"updateAuthority\", \"pubkeyAsString\"],\n        [\"mint\", \"pubkeyAsString\"],\n        [\"data\", Data],\n        [\"primarySaleHappened\", \"u8\"], // bool\n        [\"isMutable\", \"u8\"], // bool\n        [\"editionNonce\", { kind: \"option\", type: \"u8\" }],\n      ],\n    },\n  ],\n  [\n    EditionMarker,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"ledger\", [31]],\n      ],\n    },\n  ],\n]);\n\nexport async function getEdition(\n  tokenMint: StringPublicKey\n): Promise<StringPublicKey> {\n  return (\n    await findProgramAddress(\n      [\n        Buffer.from(METADATA_PREFIX),\n        new PublicKey(programIds.metadata).toBuffer(),\n        new PublicKey(tokenMint).toBuffer(),\n        Buffer.from(EDITION),\n      ],\n      new PublicKey(programIds.metadata)\n    )\n  )[0];\n}\n\nexport async function createMasterEdition(\n  maxSupply: BN | undefined,\n  mintKey: StringPublicKey,\n  updateAuthorityKey: StringPublicKey,\n  mintAuthorityKey: StringPublicKey,\n  payer: StringPublicKey,\n  instructions: TransactionInstruction[]\n) {\n  const metadataProgramId = programIds.metadata;\n\n  const metadataAccount = (\n    await findProgramAddress(\n      [\n        Buffer.from(METADATA_PREFIX),\n        new PublicKey(metadataProgramId).toBuffer(),\n        new PublicKey(mintKey).toBuffer(),\n      ],\n      new PublicKey(metadataProgramId)\n    )\n  )[0];\n\n  const editionAccount = (\n    await findProgramAddress(\n      [\n        Buffer.from(METADATA_PREFIX),\n        new PublicKey(metadataProgramId).toBuffer(),\n        new PublicKey(mintKey).toBuffer(),\n        Buffer.from(EDITION),\n      ],\n      new PublicKey(metadataProgramId)\n    )\n  )[0];\n\n  const value = new CreateMasterEditionArgs({ maxSupply: maxSupply || null });\n  const data = Buffer.from(serialize(METADATA_SCHEMA, value));\n\n  const keys = [\n    {\n      pubkey: new PublicKey(editionAccount),\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: new PublicKey(mintKey),\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: new PublicKey(updateAuthorityKey),\n      isSigner: true,\n      isWritable: false,\n    },\n    {\n      pubkey: new PublicKey(mintAuthorityKey),\n      isSigner: true,\n      isWritable: false,\n    },\n    {\n      pubkey: new PublicKey(payer),\n      isSigner: true,\n      isWritable: false,\n    },\n    {\n      pubkey: new PublicKey(metadataAccount),\n      isSigner: false,\n      isWritable: false,\n    },\n\n    {\n      pubkey: programIds.token,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n\n  instructions.push(\n    new TransactionInstruction({\n      keys,\n      programId: new PublicKey(metadataProgramId),\n      data,\n    })\n  );\n}\n\nexport async function createMetadata(\n  data: Data,\n  updateAuthority: StringPublicKey,\n  mintKey: StringPublicKey,\n  mintAuthorityKey: StringPublicKey,\n  instructions: TransactionInstruction[],\n  payer: StringPublicKey\n) {\n  const metadataProgramId = programIds.metadata;\n  const metadataAccount = (\n    await findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        new PublicKey(metadataProgramId).toBuffer(),\n        new PublicKey(mintKey).toBuffer(),\n      ],\n      new PublicKey(metadataProgramId)\n    )\n  )[0];\n\n  const value = new CreateMetadataArgs({ data, isMutable: true });\n\n  let txnData = Buffer.from(serialize(METADATA_SCHEMA, value));\n  const keys = [\n    {\n      pubkey: new PublicKey(metadataAccount),\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: new PublicKey(mintKey),\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: new PublicKey(mintAuthorityKey),\n      isSigner: true,\n      isWritable: false,\n    },\n    {\n      pubkey: new PublicKey(payer),\n      isSigner: true,\n      isWritable: false,\n    },\n    {\n      pubkey: new PublicKey(updateAuthority),\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  instructions.push(\n    new TransactionInstruction({\n      keys,\n      programId: new PublicKey(metadataProgramId),\n      data: txnData,\n    })\n  );\n  return metadataAccount;\n}\n\nexport async function updateMetadata(\n  data: Data | undefined,\n  newUpdateAuthority: string | undefined,\n  primarySaleHappened: boolean | null | undefined,\n  mintKey: StringPublicKey,\n  updateAuthority: StringPublicKey,\n  instructions: TransactionInstruction[],\n  metadataAccount?: StringPublicKey\n) {\n  const metadataProgramId = programIds.metadata;\n  metadataAccount =\n    metadataAccount ||\n    (\n      await findProgramAddress(\n        [\n          Buffer.from(\"metadata\"),\n          new PublicKey(metadataProgramId).toBuffer(),\n          new PublicKey(mintKey).toBuffer(),\n        ],\n        new PublicKey(metadataProgramId)\n      )\n    )[0];\n\n  const value = new UpdateMetadataArgs({\n    data,\n    updateAuthority: !newUpdateAuthority ? undefined : newUpdateAuthority,\n    primarySaleHappened:\n      primarySaleHappened === null || primarySaleHappened === undefined\n        ? null\n        : primarySaleHappened,\n  });\n  const txnData = Buffer.from(serialize(METADATA_SCHEMA, value));\n  const keys = [\n    {\n      pubkey: new PublicKey(metadataAccount),\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: new PublicKey(updateAuthority),\n      isSigner: true,\n      isWritable: false,\n    },\n  ];\n  instructions.push(\n    new TransactionInstruction({\n      keys,\n      programId: new PublicKey(metadataProgramId),\n      data: txnData,\n    })\n  );\n  return metadataAccount;\n}\n","import * as borsh from 'borsh';\n\nexport class GreetingAccount {\n    counter = 0;\n    highest_trans=0;\n    constructor(fields: {counter: number,highest_trans:number} | undefined = undefined) {\n      if (fields) {\n        this.counter = fields.counter;\n        this.highest_trans = fields.highest_trans;\n      }\n    }\n  }\n  \nexport const GreetingSchema = new Map([\n    [GreetingAccount, {kind: 'struct', fields: [['counter', 'u32'],['highest_trans','u64']]}],\n  ]);\n  \nexport const GREETING_SIZE = borsh.serialize(\n    GreetingSchema,\n    new GreetingAccount(),\n  ).length;\n\n","import path from \"path\";\n\n/**\n * Path to program files\n */\n// const __dirname = \"/User/kiet.huynh/Self-Study/Blockchain/solana-wallet-apdater\";\n\nconst PROGRAM_PATH = path.resolve(__dirname, '../../dist/program');\n\nconsole.log(\"PROGRAM_PATH,PROGRAM_PATH\", PROGRAM_PATH);\n\nexport const PROGRAM_KEYPAIR_PATH = path.join(\n  PROGRAM_PATH,\n  \"helloworld-keypair.json\"\n);\n\nexport const PROGRAM_SO_PATH = path.join(PROGRAM_PATH, \"helloworld.so\");\n\nexport const PAYER_PATH = path.resolve(__dirname, \"solana-wallet\");\n\nexport const PAYER_KEYPAIR_PATH = path.join(PAYER_PATH, \"keypair.json\");\n","import { PublicKey } from \"@solana/web3.js\";\nimport * as borsh from \"borsh\";\nimport * as BufferLayout from \"buffer-layout\";\n\nconst publicKey = (property = \"publicKey\") => {\n  return BufferLayout.blob(32, property);\n};\n\nexport const GAME_RULE_ACCOUNT_DATA_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8(\"is_initialized\"),\n  publicKey(\"initializer_pubkey\"),\n  publicKey(\"initializer_mortgage_token_account_pubkey\"),\n  publicKey(\"initializer_token_to_receive_account_pubkey\"),\n]);\n\nexport interface GameRuleLayout {\n  is_initialized: number;\n  initializer_pubkey: Uint8Array;\n  initializer_mortgage_token_account_pubkey: Uint8Array;\n  initializer_token_to_receive_account_pubkey: Uint8Array;\n}\n\n// export class GameRuleAccount {\n//   is_initialized!: boolean;\n//   initializer_pubkey!: PublicKey;\n//   initializer_mortgage_token_account_pubkey!: PublicKey;\n//   initializer_token_to_receive_account_pubkey!: PublicKey;\n\n//   constructor(fields: {\n//     is_initialized: boolean;\n//     initializer_pubkey: PublicKey;\n//     initializer_mortgage_token_account_pubkey: PublicKey;\n//     initializer_token_to_receive_account_pubkey: PublicKey;\n//   }) {\n//     if (fields) {\n//       this.is_initialized = fields.is_initialized;\n//       this.initializer_pubkey = fields.initializer_pubkey;\n//       this.initializer_mortgage_token_account_pubkey =\n//         fields.initializer_mortgage_token_account_pubkey;\n//       this.initializer_token_to_receive_account_pubkey =\n//         fields.initializer_token_to_receive_account_pubkey;\n//     }\n//   }\n// }\n\n// export const GameRuleSchema = new Map([\n//   [\n//     GameRuleAccount,\n//     {\n//       kind: \"struct\",\n//       fields: [\n//         [\"is_initialized\", \"u8\"],\n//         [\"initializer_pubkey\", \"Pubkey\"],\n//         [\"initializer_mortgage_token_account_pubkey\", \"Pubkey\"],\n//         [\"initializer_token_to_receive_account_pubkey\", \"Pubkey\"],\n//       ],\n//     },\n//   ],\n// ]);\n\n// export const GAME_RULE_SIZE = borsh.serialize(\n//   GameRuleSchema,\n//   new GameRuleAccount()\n// ).length;\n","import { Keypair } from '@solana/web3.js';\nimport {PRIVATE_KEY_DEFAULT_ACCOUNT} from '../constants/defaultWallet';\nimport bs58 from \"bs58\";\n\nexport const getDefaultAccount = () => {\n    const decoded = bs58.decode(PRIVATE_KEY_DEFAULT_ACCOUNT);\n    const defaultAcc = Keypair.fromSecretKey(decoded)\n    return defaultAcc;\n}","export const PRIVATE_KEY_DEFAULT_ACCOUNT = \"3WtaDTy4jTUWSaMXudnDaxJ4xEhmr8fm6Ht9doXTgHLjN9Yfh5BrioseyKiNXvyTBeML9h8naN6dTKYz6zkD1MRG\"\n\n","import {\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  Transaction,\n  TransactionSignature,\n  LAMPORTS_PER_SOL,\n  Connection,\n  clusterApiUrl,\n  sendAndConfirmTransaction,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport * as splToken from \"@solana/spl-token\";\nimport fs from \"mz/fs\";\nimport * as borsh from \"borsh\";\nimport BN from \"bn.js\";\n\nimport { AccountAPI } from \"./index\";\n\nimport { toast } from \"react-toastify\";\nimport NotificationToastify from \"../components/NotificationToastify\";\nimport { defaultToastOptions } from \"../constants/toastifyOptions\";\nimport { GREETING_SIZE, GreetingSchema, GreetingAccount } from \"../model\";\nimport {  getPayer } from \"./../utils\";\nimport {  PROGRAM_SO_PATH } from \"./../config\";\n\nlet programId: PublicKey;\n\nlet connection: Connection;\n\nlet greetedPubkey: PublicKey;\n\nlet payer: Keypair;\n\nexport async function establishConnection(): Promise<void> {\n  connection = new Connection(clusterApiUrl(\"devnet\"));\n  const version = await connection.getVersion();\n  console.log(\"Connection to cluster established:\", version);\n}\n\nexport async function establishPayer(): Promise<void> {\n  let fees = 0;\n  if (!payer) {\n    const { feeCalculator } = await connection.getRecentBlockhash();\n\n    // Calculate the cost to fund the greeter account\n    fees += await connection.getMinimumBalanceForRentExemption(GREETING_SIZE);\n\n    // Calculate the cost of sending transactions\n    fees += feeCalculator.lamportsPerSignature * 100; // wag\n\n    payer = await getPayer();\n\n    let lamports = await connection.getBalance(payer.publicKey);\n\n    console.log(\n      \"Using account\",\n      payer.publicKey.toBase58(),\n      \"containing\",\n      lamports / LAMPORTS_PER_SOL,\n      \"SOL to pay for fees\"\n    );\n  }\n}\n\nexport async function checkProgram(): Promise<void> {\n  // Read program id from keypair file\n  // try {\n  //   const programKeypair = await createKeypairFromFile(PROGRAM_KEYPAIR_PATH);\n  //   console.log('programKeypair',programKeypair)\n  programId = new PublicKey(\"79zQmhDa9ZR4E5gtKrLZnuHyVcXwPBkgGz4yE7fYQrZ3\");\n  // } catch (err) {\n  //   const errMsg = (err as Error).message;\n  //   throw new Error(\n  //     `Failed to read program keypair at '${PROGRAM_KEYPAIR_PATH}' due to error: ${errMsg}. Program may need to be deployed with \\`solana program deploy dist/program/helloworld.so\\``\n  //   );\n  // }\n\n  console.log(\"programId\", programId);\n  // Check if the program has been deployed\n  const programInfo = await connection.getAccountInfo(programId);\n  if (programInfo === null) {\n    if (fs.existsSync(PROGRAM_SO_PATH)) {\n      throw new Error(\n        \"Program needs to be deployed with `solana program deploy dist/program/helloworld.so`\"\n      );\n    } else {\n      throw new Error(\"Program needs to be built and deployed\");\n    }\n  } else if (!programInfo.executable) {\n    throw new Error(`Program is not executable`);\n  }\n  console.log(`Using program ${programId.toBase58()}`);\n\n  // Derive the address (public key) of a greeting account from the program so that it's easy to find later.\n  const GREETING_SEED = \"hello\";\n  greetedPubkey = await PublicKey.createWithSeed(\n    payer.publicKey,\n    GREETING_SEED,\n    programId\n  );\n\n  // Check if the greeting account has already been created\n  const greetedAccount = await connection.getAccountInfo(greetedPubkey);\n  if (greetedAccount === null) {\n    console.log(\n      \"Creating account\",\n      greetedPubkey.toBase58(),\n      \"to say hello to\"\n    );\n    const lamports = await connection.getMinimumBalanceForRentExemption(\n      GREETING_SIZE\n    );\n\n    const transaction = new Transaction().add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: payer.publicKey,\n        basePubkey: payer.publicKey,\n        seed: GREETING_SEED,\n        newAccountPubkey: greetedPubkey,\n        lamports,\n        space: GREETING_SIZE,\n        programId,\n      })\n    );\n    await sendAndConfirmTransaction(connection, transaction, [payer]);\n  }\n}\n\n/**\n * Report the number of times the greeted account has been said hello to\n */\nexport async function reportGreetings():Promise<any> {\n  const accountInfo = await connection.getAccountInfo(greetedPubkey);\n  if (accountInfo === null) {\n    throw \"Error: cannot find the greeted account\";\n  }\n  const greeting = borsh.deserialize(\n    GreetingSchema,\n    GreetingAccount,\n    accountInfo.data\n  );\n  console.log(\n    // greetedPubkey.toBase58(),\n    \"S3 program has been greeted\",\n    greeting.counter,\n    \"time(s)\"\n  );\n  console.log(\"the highest transaction of program is: \",greeting.highest_trans / LAMPORTS_PER_SOL)\n}\n\nexport const withdrawToWallet = async (toPubkey: PublicKey, amount: number) => {\n  const connection = new Connection(clusterApiUrl(\"devnet\"));\n  const defaultAccount = AccountAPI.getDefaultAccount();\n\n  console.log(\"buffer here\", Buffer.from(new BN(amount * LAMPORTS_PER_SOL).toArray(\"le\", 8)));\n  // greeting program instruction\n  const instruction = new TransactionInstruction({\n    keys: [{ pubkey: greetedPubkey, isSigner: false, isWritable: true }],\n    programId,\n    data:  Buffer.from(new BN(amount * LAMPORTS_PER_SOL).toArray(\"le\", 8)), // All instructions are hellos\n  });\n\n  let signature: TransactionSignature = \"\";\n\n  try {\n    const transaction = new Transaction().add(\n      instruction,\n      SystemProgram.transfer({\n        fromPubkey: defaultAccount.publicKey,\n        toPubkey,\n        lamports: amount * LAMPORTS_PER_SOL,\n      })\n    );\n    signature = await connection.sendTransaction(transaction, [defaultAccount]);\n    toast.info(\n      <NotificationToastify\n        signature={signature}\n        message=\"Transaction sent:\"\n      />,\n      defaultToastOptions\n    );\n    await connection.confirmTransaction(signature, \"processed\");\n    toast.success(\n      <NotificationToastify\n        signature={signature}\n        message=\"Transaction successful!\"\n      />,\n      defaultToastOptions\n    );\n    setTimeout(() => {\n      reportGreetings();\n    }, 2000);\n  } catch (error: any) {\n    toast.error(\n      <NotificationToastify\n        signature={signature}\n        message={`Transaction failed! ${error?.message}`}\n      />,\n      defaultToastOptions\n    );\n  }\n};\n\nexport const withdrawTokenToWallet = async (\n  toPubkey: PublicKey,\n  amount: number\n) => {\n  const connection = new Connection(clusterApiUrl(\"devnet\"));\n  const defaultAccount = AccountAPI.getDefaultAccount();\n  const mintTokenAddress = new PublicKey(\n    process.env.REACT_APP_XMT_TOKEN_ADDRESS || \"\"\n  );\n\n  var myToken = new splToken.Token(\n    connection,\n    mintTokenAddress,\n    splToken.TOKEN_PROGRAM_ID,\n    defaultAccount\n  );\n\n  var fromTokenAccount = await myToken.getOrCreateAssociatedAccountInfo(\n    defaultAccount.publicKey\n  );\n  var toTokenAccount = await myToken.getOrCreateAssociatedAccountInfo(toPubkey);\n\n  let signature: TransactionSignature = \"\";\n  try {\n    const transaction = new Transaction().add(\n      splToken.Token.createTransferInstruction(\n        splToken.TOKEN_PROGRAM_ID,\n        fromTokenAccount.address,\n        toTokenAccount.address,\n        defaultAccount.publicKey,\n        [],\n        amount * LAMPORTS_PER_SOL\n      )\n    );\n    signature = await connection.sendTransaction(transaction, [defaultAccount]);\n    toast.info(\n      <NotificationToastify\n        signature={signature}\n        message=\"Transaction sent:\"\n      />,\n      defaultToastOptions\n    );\n    await connection.confirmTransaction(signature, \"processed\");\n\n    //report state greeting count from program\n\n    toast.success(\n      <NotificationToastify\n        signature={signature}\n        message=\"Transaction successful!\"\n      />,\n      defaultToastOptions\n    );\n  } catch (error: any) {\n    toast.error(\n      <NotificationToastify\n        signature={signature}\n        message={`Transaction failed! ${error?.message}`}\n      />,\n      defaultToastOptions\n    );\n  }\n};\n\nexport const depositFromWallet = async (\n  fromPubkey: PublicKey,\n  amount: number,\n  connection: Connection,\n  sendTransaction: any\n) => {\n  const defaultAccount = AccountAPI.getDefaultAccount();\n\n  let signature: TransactionSignature = \"\";\n  try {\n    const transaction = new Transaction().add(\n      SystemProgram.transfer({\n        fromPubkey,\n        toPubkey: defaultAccount.publicKey,\n        lamports: amount * LAMPORTS_PER_SOL,\n      })\n    );\n    signature = await sendTransaction(transaction, connection);\n    toast.info(\n      <NotificationToastify\n        signature={signature}\n        message=\"Transaction sent:\"\n      />,\n      defaultToastOptions\n    );\n    const result = await connection.confirmTransaction(signature, \"processed\");\n    toast.success(\n      <NotificationToastify\n        signature={signature}\n        message=\"Transaction successful!\"\n      />,\n      defaultToastOptions\n    );\n    return result;\n  } catch (error: any) {\n    toast.error(\n      <NotificationToastify\n        signature={signature}\n        message={`Transaction failed! ${error?.message}`}\n      />,\n      defaultToastOptions\n    );\n  }\n};\n","import { PAYER_KEYPAIR_PATH } from \"../config/index\";\n\nimport { Connection, Keypair, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\n\nimport bs58 from \"bs58\";\nimport idl from \"../idl.json\";\nimport { Idl, Program, Provider } from \"@project-serum/anchor\";\n\nexport const NETWORK = clusterApiUrl(\"devnet\");\nexport const PROGRAM_KEY = new PublicKey(idl.metadata.address);\n\nexport const connection = new Connection(NETWORK,\"confirmed\");\n\nexport const mintTokenAddress = new PublicKey(\n  process.env.REACT_APP_XMT_TOKEN_ADDRESS || \"\"\n);\n\nexport async function getPayer(): Promise<Keypair> {\n  try {\n    console.log(\"PAYER_KEYPAIR_PATH\", PAYER_KEYPAIR_PATH);\n    if (!PAYER_KEYPAIR_PATH) throw new Error(\"Missing keypair path\");\n    const decoded = bs58.decode(\n      process.env.REACT_APP_PAYER_GREETING_ACCOUNT || \"\"\n    );\n    return await Keypair.fromSecretKey(decoded);\n  } catch (err) {\n    console.error(\n      \"Failed to create keypair from CLI config file, falling back to new random keypair\",\n      err\n    );\n    return Keypair.generate();\n  }\n}\n\nconst PubKeysInternedMap = new Map<string, PublicKey>();\n\nexport const toPublicKey = (key: string | PublicKey) => {\n  if (typeof key !== \"string\") {\n    return key;\n  }\n\n  let result = PubKeysInternedMap.get(key);\n  if (!result) {\n    result = new PublicKey(key);\n    PubKeysInternedMap.set(key, result);\n  }\n\n  return result;\n};\n\nexport const findProgramAddress = async (\n  seeds: (Buffer | Uint8Array)[],\n  programId: PublicKey\n) => {\n  const result = await PublicKey.findProgramAddress(seeds, programId);\n\n  return [result[0].toBase58(), result[1]] as [string, number];\n};\n\nexport const sleepUtil = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\n\nexport function getProgram(provider: Provider) {\n  return new Program(idl as Idl, PROGRAM_KEY, provider);\n}\n","import { Connection } from \"@metaplex/js\";\nimport { BinaryReader, BinaryWriter, serialize } from \"borsh\";\nimport base58 from \"bs58\";\nimport * as splToken from \"@solana/spl-token\";\nimport crypto from \"crypto\";\nimport BN from \"bn.js\";\n\nimport { findProgramAddress, toPublicKey, sleepUtil } from \"../utils/index\";\nimport {\n  METADATA_SCHEMA,\n  createMasterEdition,\n  Attribute,\n  Creator,\n  Data,\n  createMetadata,\n  updateMetadata,\n  StringPublicKey,\n} from \"../model/metadata\";\n\nimport {\n  Keypair,\n  PublicKey,\n  Transaction,\n  clusterApiUrl,\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  Commitment,\n  TransactionSignature,\n  SignatureStatus,\n} from \"@solana/web3.js\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Dispatch, SetStateAction } from \"react\";\n\nexport const TOKEN_PROGRAM_ID = new PublicKey(\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n);\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nconst METADATA_PROGRAM_ID = \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\";\n\nconst MEMO_ID = new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\");\n\nconst programIds = {\n  token: TOKEN_PROGRAM_ID,\n  associatedToken: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  metadata: METADATA_PROGRAM_ID,\n  memo: MEMO_ID,\n};\n\nexport type ENDPOINT_NAME =\n  | \"mainnet-beta\"\n  | \"testnet\"\n  | \"devnet\"\n  | \"localnet\"\n  | \"lending\";\n\n\nexport const AR_SOL_HOLDER_ID = new PublicKey(\n  \"HvwC9QSAzvGXhhVrgPmauVwFWcYZhne3hVot9EbHuFTm\"\n);\n\nexport const DEFAULT_TIMEOUT = 15000;\nexport const RESERVED_TXN_MANIFEST = \"manifest.json\";\n\n/**\n * Utility to add functionality to BinaryReader\n */\nexport const extendBorsh = () => {\n  (BinaryReader.prototype as any).readPubkey = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return new PublicKey(array);\n  };\n\n  (BinaryWriter.prototype as any).writePubkey = function (value: PublicKey) {\n    const writer = this;\n    writer.writeFixedArray(value.toBuffer());\n  };\n\n  (BinaryReader.prototype as any).readPubkeyAsString = function () {\n    const reader = this;\n    const array = reader.readFixedArray(32);\n    return base58.encode(array);\n  };\n\n  (BinaryWriter.prototype as any).writePubkeyAsString = function (\n    value: StringPublicKey\n  ) {\n    const writer = this;\n    writer.writeFixedArray(base58.decode(value));\n  };\n};\nextendBorsh();\n\nexport const mintNFT = async function (\n  connection: Connection,\n  wallet: WalletContextState | undefined,\n  env: ENDPOINT_NAME,\n  files: File[],\n  metadata: {\n    name: string;\n    symbol: string;\n    description: string;\n    image: string | undefined;\n    animation_url: string | undefined;\n    attributes: Attribute[] | undefined;\n    external_url: string;\n    properties: any;\n    creators: Creator[] | null;\n    sellerFeeBasisPoints: number;\n  },\n  progressCallback: Dispatch<SetStateAction<number>>,\n  maxSupply: number = 1\n) {\n  if (!wallet?.publicKey) return;\n\n  const metadataContent = {\n    name: metadata.name,\n    symbol: metadata.symbol,\n    description: metadata.description,\n    attributes: metadata.attributes,\n    seller_fee_basis_points: metadata.sellerFeeBasisPoints,\n    image: metadata.image,\n    animation_url: metadata.animation_url,\n    external_url: metadata.external_url,\n    properties: {\n      ...metadata.properties,\n      creators: metadata.creators?.map((creator: any) => {\n        return {\n          address: creator.address,\n          share: creator.share,\n        };\n      }),\n    },\n  };\n  const realFiles = [\n    ...files,\n    new File([JSON.stringify(metadataContent)], \"metadata.json\"),\n  ];\n\n  const { instructions: pushInstructions, signers: pushSigners } =\n    await prepPayForFilesTxn(wallet, realFiles, metadata);\n  progressCallback(1);\n  // Allocate memory for the account\n  const mintRent = await connection.getMinimumBalanceForRentExemption(\n    splToken.MintLayout.span\n  );\n\n  const payerPublicKey = wallet.publicKey.toBase58();\n  const instructions: TransactionInstruction[] = [...pushInstructions];\n  const signers: Keypair[] = [...pushSigners];\n\n  // This is only temporarily owned by wallet - transferred to program by createMasterEdition below\n  const mintKey = createMint(\n    instructions,\n    wallet.publicKey,\n    mintRent,\n    0,\n    // Some weird bug with Phantom where its public key doesn't mesh with data encode well\n    new PublicKey(payerPublicKey),\n    new PublicKey(payerPublicKey),\n    signers\n  ).toBase58();\n\n  const recipientKey = (\n    await findProgramAddress(\n      [\n        wallet.publicKey.toBuffer(),\n        programIds.token.toBuffer(),\n        new PublicKey(mintKey).toBuffer(),\n      ],\n      programIds.associatedToken\n    )\n  )[0];\n\n  createAssociatedTokenAccountInstruction(\n    instructions,\n    new PublicKey(recipientKey),\n    wallet.publicKey,\n    wallet.publicKey,\n    new PublicKey(mintKey)\n  );\n  const classData = new Data({\n    symbol: metadata.symbol,\n    name: metadata.name,\n    uri: \" \".repeat(64), // size of url for arweave\n    sellerFeeBasisPoints: metadata.sellerFeeBasisPoints,\n    creators: metadata.creators,\n  });\n  const metadataAccount = await createMetadata(\n    classData,\n    payerPublicKey,\n    mintKey,\n    payerPublicKey,\n    instructions,\n    wallet.publicKey.toBase58()\n  );\n  progressCallback(2);\n\n  const { txid } = await sendTransactionWithRetry(\n    connection,\n    wallet,\n    instructions,\n    signers\n  );\n  progressCallback(3);\n  try {\n    // return\n    await connection.confirmTransaction(txid, \"max\");\n    progressCallback(4);\n  } catch {\n    // ignore\n  }\n\n  await connection.getParsedConfirmedTransaction(txid, \"confirmed\");\n  progressCallback(5);\n  const data = new FormData();\n  //missing here\n\n  const tags = realFiles.reduce(\n    (acc: Record<string, Array<{ name: string; value: string }>>, f) => {\n      acc[f.name] = [{ name: \"mint\", value: mintKey }];\n      return acc;\n    },\n    {}\n  );\n  data.append(\"tags\", JSON.stringify(tags));\n  data.append(\"transaction\", txid);\n  realFiles.map((f) => data.append(\"file[]\", f));\n\n  const result = await (\n    await fetch(\n      \"https://us-central1-principal-lane-200702.cloudfunctions.net/uploadFile2\",\n      {\n        method: \"POST\",\n        body: data,\n      }\n    )\n  ).json();\n\n  const metadataFile = result.messages?.find(\n    (m: any) => m.filename === RESERVED_TXN_MANIFEST\n  );\n  const arweaveLink = `https://arweave.net/${metadataFile.transactionId}`;\n\n  if (metadataFile?.transactionId) {\n    const updateInstructions: any = [];\n    const updateSigners: any = [];\n\n    await updateMetadata(\n      new Data({\n        name: metadata.name,\n        symbol: metadata.symbol,\n        uri: arweaveLink,\n        creators: metadata.creators,\n        sellerFeeBasisPoints: metadata.sellerFeeBasisPoints,\n      }),\n      undefined,\n      undefined,\n      mintKey,\n      payerPublicKey,\n      updateInstructions,\n      metadataAccount\n    );\n    progressCallback(6);\n\n    updateInstructions.push(\n      splToken.Token.createMintToInstruction(\n        TOKEN_PROGRAM_ID,\n        new PublicKey(mintKey),\n        new PublicKey(recipientKey),\n        new PublicKey(payerPublicKey),\n        [],\n        1\n      )\n    );\n    progressCallback(7);\n\n    await createMasterEdition(\n      new BN(maxSupply),\n      mintKey,\n      payerPublicKey,\n      payerPublicKey,\n      payerPublicKey,\n      updateInstructions\n    );\n\n    progressCallback(8);\n    await sendTransactionWithRetry(\n      connection,\n      wallet,\n      updateInstructions,\n      updateSigners\n    );\n  }\n  return { metadataAccount, arweaveLink, mintKey, account: recipientKey };\n};\n\nconst prepPayForFilesTxn = async (\n  wallet: WalletContextState,\n  files: File[],\n  metadata: any\n) => {\n  const memo = programIds.memo;\n  const instructions: TransactionInstruction[] = [];\n  const signers: Keypair[] = [];\n  if (wallet.publicKey)\n    instructions.push(\n      SystemProgram.transfer({\n        fromPubkey: wallet.publicKey,\n        toPubkey: AR_SOL_HOLDER_ID,\n        lamports: 100000000,\n      })\n    );\n  //Already uploading files on IPFS, hence no files to be transacted here\n  for (let i = 0; i < files.length; i++) {\n    const hashSum = crypto.createHash(\"sha256\");\n    hashSum.update(await files[i].text());\n    const hex = hashSum.digest(\"hex\");\n    instructions.push(\n      new TransactionInstruction({\n        keys: [],\n        programId: memo,\n        data: Buffer.from(hex),\n      })\n    );\n  }\n  return {\n    instructions,\n    signers,\n  };\n};\n\nfunction createMint(\n  instructions: TransactionInstruction[],\n  payer: PublicKey,\n  mintRentExempt: number,\n  decimals: number,\n  owner: PublicKey,\n  freezeAuthority: PublicKey,\n  signers: Keypair[]\n) {\n  const account = createUninitializedMint(\n    instructions,\n    payer,\n    mintRentExempt,\n    signers\n  );\n  instructions.push(\n    splToken.Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      account,\n      decimals,\n      owner,\n      freezeAuthority\n    )\n  );\n  return account;\n}\n\nfunction createUninitializedMint(\n  instructions: TransactionInstruction[],\n  payer: PublicKey,\n  amount: number,\n  signers: Keypair[]\n) {\n  const account = Keypair.generate();\n  instructions.push(\n    SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: account.publicKey,\n      lamports: amount,\n      space: splToken.MintLayout.span,\n      programId: TOKEN_PROGRAM_ID,\n    })\n  );\n  signers.push(account);\n  return account.publicKey;\n}\n\nfunction createAssociatedTokenAccountInstruction(\n  instructions: TransactionInstruction[],\n  associatedTokenAddress: PublicKey,\n  payer: PublicKey,\n  walletAddress: PublicKey,\n  splTokenMintAddress: PublicKey\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: programIds.token,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  instructions.push(\n    new TransactionInstruction({\n      keys,\n      programId: programIds.associatedToken,\n      data: Buffer.from([]),\n    })\n  );\n}\n\nconst sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = \"singleGossip\",\n  includesFeePayer: Boolean = false,\n  block?: any,\n  beforeSend?: any\n) => {\n  let transaction = new Transaction();\n  instructions.forEach((instruction) => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map((s) => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n  }\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n  if (beforeSend) {\n    beforeSend();\n  }\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n  return { txid, slot };\n};\nconst getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nasync function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid = await connection.sendRawTransaction(rawTransaction, {\n    skipPreflight: true,\n  });\n  console.log(\"Started awaiting confirmation for\", txid);\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleepUtil(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      \"recent\",\n      true\n    );\n    if (!confirmation)\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error(\"Transaction failed: Custom instruction error\");\n    }\n    slot = confirmation?.slot || 0;\n  } catch (err) {\n  } finally {\n    done = true;\n  }\n  console.log(\"Latency\", txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = \"recent\",\n  queryStatus = false\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result: any, context: any) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log(\"Rejected via websocket\", result.err);\n            reject(status);\n          } else {\n            console.log(\"Resolved via websocket\", result);\n            resolve(status);\n          }\n        },\n        commitment\n      );\n    } catch (e) {\n      done = true;\n      console.error(\"WS error in setup\", txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleepUtil(1000);\n    }\n  });\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId])\n    connection.removeSignatureListener(subId);\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n}\n","import React, { FC, useState } from \"react\";\n\nimport { Button } from \"@mui/material\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport {\n  Keypair,\n  LAMPORTS_PER_SOL,\n  PublicKey,\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n} from \"@solana/web3.js\";\nimport { message, Row, Modal, Col, Descriptions, Typography, Spin } from \"antd\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\n\nimport BN from \"bn.js\";\n\nimport {\n  AccountLayout,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\n\nimport { mintTokenAddress, connection, sleepUtil } from \"../../utils\";\nimport { GAME_RULE_ACCOUNT_DATA_LAYOUT } from \"../../model/game_rule\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { toast } from \"react-toastify\";\nimport NotificationToastify from \"../../components/NotificationToastify\";\nimport { defaultToastOptions } from \"../../constants/toastifyOptions\";\n\nconst DEFAULT_MORTGAGE_VALUE = 5;\nconst GAME_RULE_PROGRAM_ID = new PublicKey(\n  \"xgiBYEpcRKnHb1TH6c9z4sSEP7CC2Gi8MRH2Y3AMU5a\"\n);\n\nconst { confirm } = Modal;\nconst { Text, Title } = Typography;\n\nexport const GameplayContainer: FC = () => {\n  const wallet = useWallet();\n  const { sendTransaction, publicKey } = wallet;\n  const [gamePubkey, setGamePubkey] = useState<PublicKey>();\n  const [isSpinning, setIsSpinning] = useState<boolean>(false);\n\n  let navigate = useNavigate();\n\n  const showConfirm = () => {\n    confirm({\n      title: <Text strong>Warning</Text>,\n      icon: <ExclamationCircleOutlined />,\n      content: `You must mortgage ${DEFAULT_MORTGAGE_VALUE} XMT before starting the game`,\n      okText: \"Agree\",\n      onOk() {\n        initGameRule();\n      },\n      onCancel() {\n        console.log(\"Cancel\");\n      },\n    });\n  };\n\n  const initGameRule = async () => {\n    if (!publicKey) return;\n    setIsSpinning(true);\n    var fromTokenAccountAddress = await Token.getAssociatedTokenAddress(\n      ASSOCIATED_TOKEN_PROGRAM_ID,\n      TOKEN_PROGRAM_ID,\n      mintTokenAddress,\n      publicKey\n    );\n\n    const fromTokenAccount = await connection.getAccountInfo(\n      fromTokenAccountAddress,\n      \"confirmed\"\n    );\n    if (!fromTokenAccount) {\n      message.error(\"please get XMT token first\");\n      setIsSpinning(false);\n      return;\n    }\n\n    console.log('associated account XMT', fromTokenAccountAddress.toString());\n\n    const InitializerMortgageAccountKeypair = new Keypair();\n    const createInitializerMortgageAccount = SystemProgram.createAccount({\n      programId: TOKEN_PROGRAM_ID,\n      space: AccountLayout.span,\n      lamports: await connection.getMinimumBalanceForRentExemption(\n        AccountLayout.span\n      ),\n      fromPubkey: publicKey,\n      newAccountPubkey: InitializerMortgageAccountKeypair.publicKey,\n    });\n\n    const initMortgageAccount = Token.createInitAccountInstruction(\n      TOKEN_PROGRAM_ID,\n      mintTokenAddress,\n      InitializerMortgageAccountKeypair.publicKey,\n      publicKey\n    );\n\n    const transferTokensToMortgageAccount = Token.createTransferInstruction(\n      TOKEN_PROGRAM_ID,\n      fromTokenAccountAddress,\n      InitializerMortgageAccountKeypair.publicKey,\n      publicKey,\n      [],\n      DEFAULT_MORTGAGE_VALUE * LAMPORTS_PER_SOL\n    );\n\n    const gameRuleKeypair = new Keypair();\n    console.log(\"gameRuleKeypair\", gameRuleKeypair.publicKey.toString());\n    console.log(\n      \"InitializerMortgageAccountKeypair\",\n      InitializerMortgageAccountKeypair.publicKey.toString()\n    );\n    const createGameRuleAccount = SystemProgram.createAccount({\n      space: GAME_RULE_ACCOUNT_DATA_LAYOUT.span,\n      lamports: await connection.getMinimumBalanceForRentExemption(\n        GAME_RULE_ACCOUNT_DATA_LAYOUT.span\n      ),\n      fromPubkey: publicKey,\n      newAccountPubkey: gameRuleKeypair.publicKey,\n      programId: GAME_RULE_PROGRAM_ID,\n    });\n\n    const initGameRule = new TransactionInstruction({\n      programId: GAME_RULE_PROGRAM_ID,\n      keys: [\n        { pubkey: publicKey, isSigner: true, isWritable: false },\n        {\n          pubkey: InitializerMortgageAccountKeypair.publicKey,\n          isSigner: false,\n          isWritable: true,\n        },\n        {\n          pubkey: fromTokenAccountAddress,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: gameRuleKeypair.publicKey,\n          isSigner: false,\n          isWritable: true,\n        },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n        { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      ],\n      data: Buffer.from(\n        Uint8Array.of(0, ...new BN(DEFAULT_MORTGAGE_VALUE).toArray(\"le\", 8))\n      ),\n    });\n    let signature: TransactionSignature = \"\";\n    try {\n      const transaction = new Transaction().add(\n        createInitializerMortgageAccount,\n        initMortgageAccount,\n        transferTokensToMortgageAccount,\n        createGameRuleAccount,\n        initGameRule\n      );\n      console.log(\"Sending initialization transaction...\");\n      console.log(\"Sending 5 XMT token to mortgage account...\");\n      signature = await sendTransaction(transaction, connection, {\n        signers: [InitializerMortgageAccountKeypair, gameRuleKeypair],\n        skipPreflight: false,\n        preflightCommitment: \"confirmed\",\n      });\n\n      toast.info(\n        <NotificationToastify\n          signature={signature}\n          message=\"Transaction sent:\"\n        />,\n        defaultToastOptions\n      );\n\n      await sleepUtil(3000);\n\n      setIsSpinning(false);\n\n      navigate(\"start\", {\n        state: { gameRulePubkey: gameRuleKeypair.publicKey.toString() },\n      });\n\n      setGamePubkey(gameRuleKeypair.publicKey);\n    } catch (error) {\n      console.log(\"error\");\n    } finally {\n      setIsSpinning(false);\n    }\n  };\n\n  return (\n    <Spin size=\"large\" spinning={isSpinning}>\n      <Row\n        style={{\n          padding: 15,\n          paddingTop: 50,\n          paddingBottom: 50,\n          height: \"100vh\",\n        }}\n        justify=\"center\"\n        align=\"middle\"\n      >\n        <Col>\n          <div>\n            <Title mark>\n              {\" \"}\n              You need to mortgage {DEFAULT_MORTGAGE_VALUE} XMT before you start\n              game\n            </Title>\n          </div>\n          <Row justify=\"center\">\n            <Button variant=\"contained\" onClick={showConfirm}>\n              Init Game Rule\n            </Button>\n          </Row>\n        </Col>\n      </Row>\n    </Spin>\n  );\n};\n","import { useWallet } from \"@solana/wallet-adapter-react\";\nimport {\n  PublicKey,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n} from \"@solana/web3.js\";\nimport {\n  message,\n  Radio,\n  Input,\n  Space,\n  Col,\n  Row,\n  Spin,\n  Modal,\n  Typography,\n  Button,\n} from \"antd\";\n\nimport BN from \"bn.js\";\n\nimport React, { FC, useState, useEffect } from \"react\";\n\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\n\nimport { mintTokenAddress, connection, sleepUtil } from \"../../utils\";\nimport {\n  GameRuleLayout,\n  GAME_RULE_ACCOUNT_DATA_LAYOUT,\n} from \"../../model/game_rule\";\nimport { getDefaultAccount } from \"../../api/account\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { getTokenBalance } from \"../../helper\";\n\nimport { toast } from \"react-toastify\";\nimport NotificationToastify from \"../../components/NotificationToastify\";\nimport { defaultToastOptions } from \"../../constants/toastifyOptions\";\n\nconst DEFAULT_MORTGAGE_VALUE: number = 5;\nconst GAME_RULE_PROGRAM_ID = new PublicKey(\n  \"xgiBYEpcRKnHb1TH6c9z4sSEP7CC2Gi8MRH2Y3AMU5a\"\n);\n\nconst { confirm } = Modal;\nconst { Text, Title } = Typography;\n\nexport const GameStartContainer: FC = () => {\n  const wallet = useWallet();\n  const { publicKey } = wallet;\n  const hostAccount = getDefaultAccount();\n  const hostAccountPubkey = hostAccount.publicKey;\n  const { state }: { state: any } = useLocation();\n  const [gameRuleStateAccountPubkey, setGameRuleStateAccountPubkey] =\n    useState<PublicKey>();\n  let navigate = useNavigate();\n  const [showBackButton, setShowBackButton] = useState(false);\n\n  const [isSpinning, setIsSpinning] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (state.gameRulePubkey) {\n      setGameRuleStateAccountPubkey(new PublicKey(state?.gameRulePubkey));\n    }\n  }, [state]);\n\n  // 1: Host pubkey\n  // 2: Player pubkey\n  const [winnerID, setWinnerID] = useState<number>(1);\n\n  const onWinnerChange = (e: any) => {\n    setWinnerID(e.target.value);\n  };\n\n  const showConfirm = (oldInitBalance: number, initBalance) => {\n    const title = winnerID === 1 ? \"Sorry\" : \"Congratulation\";\n\n    confirm({\n      icon: null,\n      title: <Title level={3}>{title.toUpperCase()}</Title>,\n      content: (\n        <Col>\n          <Row>\n            <Text>\n              You {winnerID === 1 ? \"lose\" : \"win\"}{\" \"}\n              <Text type={winnerID === 1 ? \"danger\" : \"success\"}>\n                {winnerID === 1 ? \"-\" : \"+\"} {DEFAULT_MORTGAGE_VALUE} XMT{\" \"}\n              </Text>\n              for the game\n            </Text>\n          </Row>\n          <Row>\n            <Text strong>\n              Old Balance:{\" \"}\n              <Text type=\"warning\">\n                {oldInitBalance + DEFAULT_MORTGAGE_VALUE} XMT\n              </Text>\n            </Text>\n          </Row>\n          <Text strong>\n            Current Balance:{\" \"}\n            <Text type={winnerID === 1 ? \"danger\" : \"success\"}>\n              {initBalance} XMT\n            </Text>\n          </Text>\n        </Col>\n      ),\n      cancelButtonProps: { hidden: true },\n      okText: \"Agree\",\n      onOk() {\n        console.log(\"ok ok\");\n      },\n    });\n  };\n\n  const startGame = async () => {\n    if (!publicKey || !gameRuleStateAccountPubkey) return;\n    setIsSpinning(true);\n    const winnerPubkey = winnerID === 1 ? hostAccountPubkey : publicKey;\n\n    var hostSendingOrReiceiveTokenAccountAddress =\n      await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        mintTokenAddress,\n        hostAccount.publicKey\n      );\n\n    const hostSendingOrReiceiveTokenAccount = await connection.getAccountInfo(\n      hostSendingOrReiceiveTokenAccountAddress,\n      \"confirmed\"\n    );\n\n    if (!hostSendingOrReiceiveTokenAccount) {\n      message.error(\"please get XMT token first\");\n      setIsSpinning(false);\n      return;\n    }\n\n    const gameRuleAccount = await connection.getAccountInfo(\n      gameRuleStateAccountPubkey\n    );\n    if (gameRuleAccount === null) {\n      message.error(\"Could not find game rule address!\");\n      setIsSpinning(false);\n      return;\n    }\n\n    const encodedGameRuleState = gameRuleAccount.data;\n\n    const decodedGameRuleState = GAME_RULE_ACCOUNT_DATA_LAYOUT.decode(\n      encodedGameRuleState\n    ) as GameRuleLayout;\n\n    const gameRuleState = {\n      gameRuleAccountPubkey: gameRuleStateAccountPubkey,\n      isInitialized: !!decodedGameRuleState.is_initialized,\n      initializerAccountPubkey: new PublicKey(\n        decodedGameRuleState.initializer_pubkey\n      ),\n      initializerMortgageAccountPubkey: new PublicKey(\n        decodedGameRuleState.initializer_mortgage_token_account_pubkey\n      ),\n      initializerTokenToReceiveAccountPubkey: new PublicKey(\n        decodedGameRuleState.initializer_token_to_receive_account_pubkey\n      ),\n    };\n\n    const PDA = await PublicKey.findProgramAddress(\n      [Buffer.from(\"escrow\")],\n      GAME_RULE_PROGRAM_ID\n    );\n\n    const exchangeInstruction = new TransactionInstruction({\n      programId: GAME_RULE_PROGRAM_ID,\n      data: Buffer.from(\n        Uint8Array.of(1, ...new BN(DEFAULT_MORTGAGE_VALUE).toArray(\"le\", 8))\n      ),\n      keys: [\n        { pubkey: hostAccount.publicKey, isSigner: true, isWritable: false },\n        {\n          pubkey: hostSendingOrReiceiveTokenAccountAddress,\n          isSigner: false,\n          isWritable: true,\n        },\n        {\n          pubkey: gameRuleState.initializerMortgageAccountPubkey,\n          isSigner: false,\n          isWritable: true,\n        },\n        {\n          pubkey: gameRuleState.initializerAccountPubkey,\n          isSigner: false,\n          isWritable: true,\n        },\n        {\n          pubkey: gameRuleState.initializerTokenToReceiveAccountPubkey,\n          isSigner: false,\n          isWritable: true,\n        },\n        {\n          pubkey: gameRuleStateAccountPubkey,\n          isSigner: false,\n          isWritable: true,\n        },\n        { pubkey: winnerPubkey, isSigner: false, isWritable: true },\n        { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n        { pubkey: PDA[0], isSigner: false, isWritable: false },\n      ],\n    });\n\n    const [initTokenBalance, hostTokenBalance] = await Promise.all([\n      getTokenBalance(publicKey),\n      getTokenBalance(hostAccountPubkey),\n    ]);\n\n    console.log(\"old balance\", {\n      player: initTokenBalance + DEFAULT_MORTGAGE_VALUE,\n      host: hostTokenBalance,\n    });\n    let signature: TransactionSignature = \"\";\n    try {\n      signature = await connection.sendTransaction(\n        new Transaction().add(exchangeInstruction),\n        [hostAccount],\n        { skipPreflight: false, preflightCommitment: \"confirmed\" }\n      );\n\n      toast.info(\n        <NotificationToastify\n          signature={signature}\n          message=\"Transaction sent:\"\n        />,\n        defaultToastOptions\n      );\n\n      await sleepUtil(3000);\n\n      setIsSpinning(false);\n\n      if (\n        (await connection.getAccountInfo(gameRuleStateAccountPubkey)) !== null\n      ) {\n        message.error(\"game rule account has not been closed\");\n        return;\n      }\n\n      if (\n        (await connection.getAccountInfo(\n          gameRuleState.initializerMortgageAccountPubkey\n        )) !== null\n      ) {\n        message.error(\"initializer mortgage token account has not been closed\");\n        return;\n      }\n\n      const [newInitTokenBalance, newHostTokenBalance] = await Promise.all([\n        getTokenBalance(publicKey),\n        getTokenBalance(hostAccountPubkey),\n      ]);\n      console.log(\"new balance\", {\n        player: newInitTokenBalance,\n        host: newHostTokenBalance,\n      });\n      setShowBackButton(true);\n      showConfirm(initTokenBalance, newInitTokenBalance);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setIsSpinning(false);\n    }\n  };\n\n  return (\n    <Spin size=\"large\" spinning={isSpinning}>\n      <Row\n        style={{ padding: 15, paddingTop: 50, paddingBottom: 50 }}\n        justify=\"center\"\n      >\n        <Col>\n          <Radio.Group onChange={onWinnerChange} value={winnerID}>\n            <Space direction=\"vertical\">\n              <Radio value={1}>Set host is winner</Radio>\n              <Radio value={2}>Set player is winner</Radio>\n            </Space>\n          </Radio.Group>\n          <Row>\n            <Button\n              style={{ marginTop: 10 }}\n              onClick={startGame}\n              type=\"primary\"\n            >\n              Start game\n            </Button>\n          </Row>\n\n          {showBackButton && (\n            <Row>\n              <Button\n                style={{ marginTop: 10 }}\n                onClick={() => navigate(-1)}\n                danger\n              >\n                Get Back\n              </Button>\n            </Row>\n          )}\n        </Col>\n      </Row>\n    </Spin>\n  );\n};\n","import React from \"react\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport LaunchIcon from \"@material-ui/icons/Launch\";\nimport { Link, makeStyles } from \"@material-ui/core\";\nimport { TransactionSignature } from \"@solana/web3.js\";\n\ninterface Props {\n  message: String;\n  signature?: TransactionSignature;\n}\n\nconst useStyles = makeStyles({\n  notification: {\n    display: \"flex\",\n    alignItems: \"center\",\n    fontSize: 14,\n  },\n  link: {\n    color: \"#ffffff\",\n    marginLeft: 20,\n    display: \"flex\",\n    alignItems: \"center\",\n    textDecoration: \"underline\",\n    fontSize: 14,\n    \"&:hover\": {\n      color: \"#777777\",\n    },\n  },\n  icon: {\n    fontSize: 20,\n    marginLeft: 8,\n  },\n});\n\nconst NotificationToastify: React.FC<Props> = (props) => {\n  const styles = useStyles();\n\n  return (\n    <>\n      <span className={styles.notification}>\n        {props.message}\n        {props.signature && (\n          <Link\n            className={styles.link}\n            href={`https://explorer.solana.com/tx/${props.signature}?cluster=devnet`}\n            target=\"_blank\"\n          >\n            Transaction\n            <LaunchIcon className={styles.icon} />\n          </Link>\n        )}\n      </span>\n    </>\n  );\n};\n\nexport default NotificationToastify;\n","import { ToastOptions } from \"react-toastify\";\n\nexport const defaultToastOptions:ToastOptions = {\n  position: \"bottom-left\",\n  autoClose: 5000,\n  hideProgressBar: true,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: true,\n  progress: undefined,\n};\n","import {\n  PublicKey,\n  Connection,\n  clusterApiUrl,\n  LAMPORTS_PER_SOL,\n  Keypair,\n} from \"@solana/web3.js\";\nimport React from \"react\";\nimport { connection, PROGRAM_KEY } from \"../utils\";\nimport md5 from \"md5\";\n\nconst getBalance = async (_pubKey: PublicKey) => {\n  const lamports = await connection.getBalance(_pubKey);\n\n  const sol = lamports / LAMPORTS_PER_SOL;\n  return sol;\n};\nconst getTokenBalance = async (_pubKey: PublicKey) => {\n  const mintTokenAddress = new PublicKey(\n    process.env.REACT_APP_XMT_TOKEN_ADDRESS || \"\"\n  );\n  let xmtTokens = await connection.getParsedTokenAccountsByOwner(_pubKey, {\n    mint: mintTokenAddress,\n  });\n  if (xmtTokens?.value.length > 0) {\n    return xmtTokens?.value[0].account.data.parsed.info.tokenAmount.uiAmount;\n  }\n  return 0;\n};\n\nconst generateNewAccount = async () => {\n  const acc = await Keypair.generate();\n  return acc;\n};\n\nconst maskedAddress = (address: string) => {\n  if (!address) return;\n  return `${address.slice(0, 6)}...${address.slice(address.length - 6)}`;\n};\n\nconst getUserKey = (walletKey: PublicKey) => {\n  const userAccount = Keypair.fromSeed(\n    new TextEncoder().encode(\n      `${PROGRAM_KEY.toString().slice(0, 15)}__${walletKey\n        .toString()\n        .slice(0, 15)}`\n    )\n  );\n\n  return userAccount;\n};\n\nexport const getAvatarUrl = (key: string) => {\n  return `https://gravatar.com/avatar/${md5(key)}?s=400&d=robohash&r=x`;\n};\n\nexport {\n  getBalance,\n  generateNewAccount,\n  maskedAddress,\n  getTokenBalance,\n  getUserKey,\n};\n","import {\n  SendTransactionOptions,\n  SignerWalletAdapter,\n} from \"@solana/wallet-adapter-base\";\nimport {\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  Transaction,\n  TransactionSignature,\n  LAMPORTS_PER_SOL,\n  Connection,\n  clusterApiUrl,\n  sendAndConfirmTransaction,\n  TransactionInstruction,\n  StakeProgram,\n  Authorized,\n  Lockup,\n  Signer,\n} from \"@solana/web3.js\";\n\nlet stakeAccount: Keypair;\n\nlet connection = new Connection(clusterApiUrl(\"devnet\"), \"confirmed\");\n\nexport async function stakingConnection(\n  fromPubkey: PublicKey,\n  sendTransaction: (\n    transaction: Transaction,\n    connection: Connection,\n    options?: SendTransactionOptions\n  ) => Promise<TransactionSignature>,\n  amountLamportsStaking: number\n): Promise<void> {\n  stakeAccount = Keypair.generate();\n  let authorizedAccount = new Authorized(fromPubkey, fromPubkey);\n\n  let signature: TransactionSignature = \"\";\n\n  let lamportsForStakeAccount =\n    (await connection.getMinimumBalanceForRentExemption(StakeProgram.space)) +\n    amountLamportsStaking * LAMPORTS_PER_SOL;\n\n  let createAccountTransaction = StakeProgram.createAccount({\n    fromPubkey: fromPubkey,\n    authorized: authorizedAccount,\n    lamports: lamportsForStakeAccount,\n    lockup: new Lockup(0, 0, fromPubkey),\n    stakePubkey: stakeAccount.publicKey,\n  });\n\n  signature = await sendTransaction(createAccountTransaction, connection, {\n    signers: [stakeAccount],\n  });\n\n  await connection.confirmTransaction(signature, \"confirmed\");\n\n  let voteAccounts = await connection.getVoteAccounts();\n  let voteAccount = voteAccounts.current.concat(voteAccounts.delinquent)[0];\n  let votePubkey = new PublicKey(voteAccount.votePubkey);\n\n  //   We can then delegate our stake to the voteAccount\n  let delegateTransaction = StakeProgram.delegate({\n    stakePubkey: stakeAccount.publicKey,\n    authorizedPubkey: fromPubkey,\n    votePubkey: votePubkey,\n  });\n  const voteSignature = await sendTransaction(delegateTransaction, connection);\n  await connection.confirmTransaction(voteSignature, \"confirmed\");\n}\n\n\n\nexport const getStakeActivation = async () => {\n  let stakeBalance = await connection.getBalance(stakeAccount.publicKey);\n  console.log(`Stake balance: ${stakeBalance}`);\n\n  let stakeState = await connection.getStakeActivation(stakeAccount.publicKey);\n  console.log(`Stake Stake: ${stakeState.state}`);\n};\n","import {\n  PublicKey,\n  Transaction,\n  TransactionSignature,\n  LAMPORTS_PER_SOL,\n  Connection,\n  clusterApiUrl,\n  SystemProgram,\n} from \"@solana/web3.js\";\nimport * as splToken from \"@solana/spl-token\";\n\nimport { AccountAPI } from \"./index\";\nimport { SendTransactionOptions } from \"@solana/wallet-adapter-base\";\nimport { toast } from \"react-toastify\";\nimport NotificationToastify from \"../components/NotificationToastify\";\nimport { defaultToastOptions } from \"../constants/toastifyOptions\";\n\nlet connection = new Connection(clusterApiUrl(\"devnet\"));\n\nlet defaultAcc = AccountAPI.getDefaultAccount();\n\nexport const buyNFT = async (\n  receiver: PublicKey,\n  mintAddress: PublicKey,\n  sendTransaction: (\n    transaction: Transaction,\n    connection: Connection,\n    options?: SendTransactionOptions\n  ) => Promise<TransactionSignature>\n) => {\n\n  let myToken = new splToken.Token(\n    connection,\n    mintAddress, // your nft address\n    splToken.TOKEN_PROGRAM_ID,\n    defaultAcc // payer\n  );\n\n  let fromTokenAccount = await myToken.getOrCreateAssociatedAccountInfo(\n    defaultAcc.publicKey\n  );\n  let toTokenAccount = await myToken.getOrCreateAssociatedAccountInfo(receiver);\n\n  let instruction = new Transaction().add(\n    SystemProgram.transfer({\n      fromPubkey: receiver,\n      toPubkey: defaultAcc.publicKey,\n      lamports: 0.49 * LAMPORTS_PER_SOL,\n    }),\n    splToken.Token.createTransferInstruction(\n      splToken.TOKEN_PROGRAM_ID,\n      fromTokenAccount.address,\n      toTokenAccount.address,\n      defaultAcc.publicKey,\n      [],\n      1\n    )\n  );\n  // Sign transaction, broadcast, and confirm\n  let signature = await sendTransaction(instruction, connection, {\n    signers: [defaultAcc],\n  });\n  toast.info(\n    <NotificationToastify signature={signature} message=\"Transaction sent:\" />,\n    defaultToastOptions\n  );\n  await connection.confirmTransaction(signature, \"processed\");\n  toast.success(\n    <NotificationToastify\n      signature={signature}\n      message=\"Transaction successful!\"\n    />,\n    defaultToastOptions\n  );\n};\n","import * as anchor from \"@project-serum/anchor\";\nimport { Wallet as AnchorWallet } from \"@project-serum/anchor/dist/cjs/provider\";\n\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport { Dispatch } from \"redux\";\nimport { getUserKey, getAvatarUrl } from \"../helper\";\nimport { saveUser } from \"../slices/authSlice\";\nimport { connection, getProgram, PROGRAM_KEY } from \"../utils\";\n\nexport interface UserData {\n  name: string;\n  avatar: string;\n}\n\nexport interface User extends UserData {\n  id: string;\n}\n\nexport const signup = async (\n  anchorWallet: AnchorWallet,\n  walletKey: PublicKey,\n  name: string\n) => {\n  const userAccount = getUserKey(walletKey);\n  const provider = new anchor.Provider(connection, anchorWallet, {});\n\n  const program = getProgram(provider);\n\n  const avatar = getAvatarUrl(name);\n\n  await program.rpc.signupUser(name, avatar, {\n    accounts: {\n      authority: walletKey,\n      userAccount: userAccount.publicKey,\n      systemProgram: SystemProgram.programId,\n    },\n    signers: [userAccount],\n  });\n};\n\nexport const updateUser = async (\n  anchorWallet: AnchorWallet,\n  walletKey: PublicKey,\n  name: string\n) => {\n  const provider = new anchor.Provider(connection, anchorWallet, {});\n  const program = getProgram(provider);\n  const avatar = getAvatarUrl(name);\n  const userAccount = getUserKey(walletKey);\n  \n  try {\n    const tx = await program.rpc.updateUser(name, avatar, {\n      accounts: {\n        authority: walletKey,\n        userAccount: userAccount.publicKey,\n        systemProgram: SystemProgram.programId,\n      },\n    });\n\n    return tx;\n  } catch {}\n};\n\nexport const fetchUser = async (anchorWallet: AnchorWallet): Promise<User> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {});\n  const program = getProgram(provider);\n  const userAccount = getUserKey(provider.wallet.publicKey);\n  const _user = await program.account.userState.fetch(userAccount.publicKey);\n\n  const user = {\n    id: userAccount.publicKey.toString(),\n    name: _user.name,\n    avatar: _user.avatar,\n  };\n  console.log(\"_user\", _user.authority.toString());\n  return user;\n};\n","import { User } from \"./../api/auth\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nexport interface AuthState {\n  user: User;\n}\n\nconst initialState: AuthState = {\n  user: {\n    id: \"\",\n    name: \"\",\n    avatar: \"\",\n  },\n};\n\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    saveUser: (state, action: PayloadAction<User>) => {\n      state.user = action.payload;\n    },\n    clearUser: (state) => {\n      state.user = {\n        id: \"\",\n        name: \"\",\n        avatar: \"\",\n      };\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { saveUser, clearUser } = authSlice.actions;\n\nexport default authSlice.reducer;\n","import React, { FC, useState, useEffect, useCallback } from \"react\";\nimport {\n  Form,\n  Input,\n  Button,\n  Row,\n  Col,\n  Typography,\n  Avatar,\n  message,\n} from \"antd\";\nimport { fetchUser, signup, User } from \"../../api/auth\";\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { saveUser } from \"../../slices/authSlice\";\nimport { RootState } from \"../../store\";\n\nconst { Title } = Typography;\n\nexport const HomeContainer: FC = () => {\n  const anchorWallet = useAnchorWallet();\n  const dispatch = useDispatch();\n  const user = useSelector((state: RootState) => state.auth.user);\n\n  const onFinish = async (values: any) => {\n    if (!anchorWallet) {\n      return;\n    }\n    await signup(anchorWallet, anchorWallet.publicKey, values.username);\n    getUser();\n    message.success(\"sign up success!!!\");\n  };\n\n  const onFinishFailed = (errorInfo: any) => {\n    message.error(`Failed: ${errorInfo}`);\n  };\n\n  const getUser = async () => {\n    if (!anchorWallet) {\n      return;\n    }\n    const user = await fetchUser(anchorWallet);\n    dispatch(saveUser(user));\n  };\n\n  if (!anchorWallet) {\n    return (\n      <Row\n        style={{ padding: 15, paddingTop: 50, paddingBottom: 50 }}\n        justify=\"space-around\"\n      >\n        <Col span={24} xs={8} lg={10} md={10}>\n          <Title level={1}>Please connect your wallet first</Title>\n        </Col>\n      </Row>\n    );\n  }\n\n  return (\n    <Row\n      style={{ padding: 15, paddingTop: 50, paddingBottom: 50 }}\n      justify=\"space-around\"\n    >\n      <Col span={24} xs={8} lg={10} md={10}>\n        {user.name ? (\n          <Title level={1}>Welcome back {user.name}, Have a good day ❤️</Title>\n        ) : (\n          <>\n            <Title level={2}>Sign Up</Title>\n            <Form\n              name=\"basic\"\n              labelCol={{ span: 8 }}\n              wrapperCol={{ span: 16 }}\n              initialValues={{ remember: true }}\n              onFinish={onFinish}\n              onFinishFailed={onFinishFailed}\n              autoComplete=\"off\"\n              layout=\"vertical\"\n            >\n              <Form.Item\n                label=\"Username\"\n                name=\"username\"\n                rules={[\n                  { required: true, message: \"Please input your username!\" },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n\n              <Form.Item>\n                <Button type=\"primary\" htmlType=\"submit\">\n                  Signup\n                </Button>\n              </Form.Item>\n            </Form>\n          </>\n        )}\n      </Col>\n    </Row>\n  );\n};\n","import React, { FC, useEffect } from \"react\";\n\nimport Button from \"@mui/material/Button\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport Container from \"@mui/material/Container\";\n\nimport { Stack } from \"@mui/material\";\nimport { useNavigate, Outlet, useLocation } from \"react-router-dom\";\n\n\nexport const WalletContainer: FC = () => {\n  let navigate = useNavigate();\n  const { pathname } = useLocation();\n  // const anchorWallet = useAnchorWallet();\n\n  // useEffect(() => {\n  //   if (anchorWallet) {\n  //     const userAccount = getUserKey(anchorWallet?.publicKey);\n  //   }\n  // }, [anchorWallet]);\n\n  console.log(\"pathname\", pathname);\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Container maxWidth=\"sm\">\n        <Stack\n          sx={{ minWidth: 275, marginTop: 10, justifyContent: \"center\" }}\n          direction=\"row\"\n          spacing={2}\n        >\n          <Button\n            variant={pathname === \"/wallet/withdraw\" ? \"contained\" : \"outlined\"}\n            onClick={() => navigate(\"withdraw\")}\n          >\n            Withdraw\n          </Button>\n          <Button\n            variant={pathname === \"/wallet/deposit\" ? \"contained\" : \"outlined\"}\n            onClick={() => navigate(\"deposit\")}\n          >\n            Deposit\n          </Button>\n        </Stack>\n      </Container>\n      <Outlet />\n    </React.Fragment>\n  );\n};\n","import React, { FC, useEffect, useState, useCallback } from \"react\";\nimport Card from \"@mui/material/Card\";\nimport CardActions from \"@mui/material/CardActions\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport Container from \"@mui/material/Container\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport FormControl from \"@mui/material/FormControl\";\nimport TextField from \"@mui/material/TextField\";\nimport MenuItem from \"@mui/material/MenuItem\";\n\nimport { useWallet, useConnection } from \"@solana/wallet-adapter-react\";\nimport { toast } from \"react-toastify\";\nimport NotificationToastify from \"../../components/NotificationToastify\";\nimport { defaultToastOptions } from \"../../constants/toastifyOptions\";\n\nimport { getBalance, getTokenBalance } from \"../../helper\";\n\nimport { useNotify } from \"../../hooks/useNotification\";\nimport { TransactionAPI, AccountAPI } from \"../../api\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../store\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nconst initialSOL = { sol: 0, xmt: 0 };\n\nexport const WithdrawContainer: FC = () => {\n  const { publicKey } = useWallet();\n\n  const [balance, setBalance] = useState(initialSOL);\n  const [sendAmount, setSendAmount] = useState(0);\n  const [customAddress, setCustomAddress] = useState(\"\");\n  const [checked, setChecked] = useState(false);\n  const [symbolType, setSymbolType] = useState(\"SOL\");\n  const user = useSelector((state: RootState) => state.auth.user);\n\n  useEffect(() => {\n    const init = async () => {\n      await TransactionAPI.establishConnection();\n\n      await TransactionAPI.establishPayer();\n\n      await TransactionAPI.checkProgram();\n    };\n    init();\n  }, []);\n\n  useEffect(() => {\n    if (publicKey) {\n      getAsyncBalance();\n    } else {\n      setBalance({ sol: 0, xmt: 0 });\n    }\n  }, [publicKey]);\n\n  async function getAsyncBalance() {\n    if (!publicKey) {\n      return;\n    }\n    // const defaultAccount = AccountAPI.getDefaultAccount();\n\n    const sol = await getBalance(publicKey);\n    const xmt = await getTokenBalance(publicKey);\n    setBalance({ sol, xmt });\n  }\n\n  const handleChange = (event: any) => {\n    setSendAmount(event.target.value);\n  };\n\n  const handleChangeAdress = (event: any) => {\n    setCustomAddress(event.target.value);\n  };\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSymbolType(event.target.value);\n  };\n\n  const handleChecked = (event: any) => {\n    if (event.target.checked && publicKey?.toString()) {\n      setCustomAddress(publicKey?.toString());\n    } else {\n      setCustomAddress(\"\");\n    }\n    setChecked(event.target.checked);\n  };\n\n  const withdrawToWallet = useCallback(async () => {\n    if (!publicKey) {\n      toast.error(\n        <NotificationToastify message=\"Wallet not connected!\" />,\n        defaultToastOptions\n      );\n      return;\n    }\n    if (symbolType === \"SOL\") {\n      TransactionAPI.withdrawToWallet(publicKey, sendAmount).finally(() =>\n        getAsyncBalance()\n      );\n    } else {\n      TransactionAPI.withdrawTokenToWallet(publicKey, sendAmount).finally(() =>\n        getAsyncBalance()\n      );\n    }\n  }, [publicKey, sendAmount, symbolType]);\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Container maxWidth=\"sm\">\n        <Card sx={{ minWidth: 300, marginTop: 10 }}>\n          <CardContent>\n            <Typography gutterBottom variant=\"h5\" textAlign=\"center\">\n              Withdraw\n            </Typography>\n            <FormControl fullWidth>\n              <TextField\n                placeholder={!user.name ? \"please connect your wallet\" : \"\"}\n                sx={{ marginBottom: 3 }}\n                value={user.name || \"\"}\n                fullWidth\n                id=\"outlined-basic\"\n                disabled={true}\n                variant=\"outlined\"\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                label=\"wallet name\"\n              />\n              <TextField\n                placeholder={!publicKey ? \"please connect your wallet\" : \"\"}\n                sx={{ marginBottom: 3 }}\n                value={publicKey || \"\"}\n                fullWidth\n                id=\"outlined-basic\"\n                disabled={true}\n                variant=\"outlined\"\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                label=\"from address\"\n              />\n              <TextField\n                sx={{ marginBottom: 3 }}\n                value={customAddress}\n                defaultValue=\"\"\n                fullWidth\n                id=\"outlined-basic\"\n                disabled={checked}\n                onChange={handleChangeAdress}\n                variant=\"outlined\"\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                label=\"to address\"\n              />\n              {/* <FormControlLabel\n                // value=\"start\"\n                control={\n                  <Checkbox\n                    inputProps={{}}\n                    onChange={handleChecked}\n                    checked={checked}\n                    color=\"success\"\n                  />\n                }\n                label={\n                  <Typography style={{ fontSize: 12, color: \"#676767\" }}>\n                    use your connected wallet\n                  </Typography>\n                }\n                labelPlacement=\"end\"\n              /> */}\n\n              <TextField\n                id=\"outlined-select-currency\"\n                select\n                value={symbolType}\n                onChange={handleSelectChange}\n                helperText=\"Please select your currency\"\n              >\n                <MenuItem key=\"SOL\" value=\"SOL\">\n                  SOL\n                </MenuItem>\n                <MenuItem key=\"XMT\" value=\"XMT\">\n                  XMT\n                </MenuItem>\n              </TextField>\n\n              <TextField\n                sx={{ marginTop: 2 }}\n                fullWidth\n                id=\"outlined-basic\"\n                label=\"amount\"\n                variant=\"outlined\"\n                value={sendAmount}\n                onChange={handleChange}\n                defaultValue={0}\n                type=\"number\"\n              />\n              <Typography variant=\"body2\" color=\"#33a382\">\n                {symbolType} available{\" \"}\n                {symbolType === \"SOL\"\n                  ? balance.sol.toFixed(4)\n                  : balance.xmt.toFixed(4)}\n              </Typography>\n            </FormControl>\n          </CardContent>\n          <CardActions sx={{ marginBottom: 2 }}>\n            <Button\n              variant=\"contained\"\n              color=\"success\"\n              fullWidth\n              size=\"large\"\n              onClick={withdrawToWallet}\n              disabled={!publicKey || !customAddress}\n            >\n              <Typography variant=\"body2\" color=\"#fff\">\n                Apply\n              </Typography>\n            </Button>\n          </CardActions>\n        </Card>\n      </Container>\n    </React.Fragment>\n  );\n};\n","import { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { getBalance, getTokenBalance, getUserKey } from \"../helper\";\n\nconst initialSOL = { sol: 0, xmt: 0 };\nexport function useSolanaBalance() {\n  const [balance, setBalance] = useState(initialSOL);\n\n  const { connection } = useConnection();\n  const { publicKey } = useWallet();\n\n  const init = useCallback(async () => {\n    if (publicKey) {\n      // const userAccount = getUserKey(publicKey);\n      const sol = await getBalance(publicKey);\n      const xmt = await getTokenBalance(publicKey);\n      setBalance({ sol, xmt });\n    }\n  }, [publicKey, connection]);\n\n  let myInterval;\n  useEffect(() => {\n    if (publicKey) {\n      myInterval = setInterval(init, 1000);\n    }\n    return () => clearInterval(myInterval);\n  }, [init, publicKey]);\n\n  return { balance };\n}\n","import React, { FC, useEffect, useState, useCallback } from \"react\";\nimport QRCode from \"react-qr-code\";\n\nimport { toast } from \"react-toastify\";\nimport NotificationToastify from \"../../components/NotificationToastify\";\nimport { defaultToastOptions } from \"../../constants/toastifyOptions\";\n\nimport Card from \"@mui/material/Card\";\nimport CardActions from \"@mui/material/CardActions\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport Container from \"@mui/material/Container\";\nimport ContentCopyIcon from \"@mui/icons-material/ContentCopy\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Tooltip from \"@mui/material/Tooltip\";\n\nimport { MenuItem, Stack, TextField } from \"@mui/material\";\nimport { useWallet, useConnection } from \"@solana/wallet-adapter-react\";\n\nimport { maskedAddress } from \"../../helper\";\n\nimport { TransactionAPI, AccountAPI } from \"../../api\";\nimport { Keypair, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../store\";\nimport { useSolanaBalance } from \"../../hooks/useSolanaBalance\";\n\nexport const DepositContainer: FC = () => {\n  const { publicKey, sendTransaction } = useWallet();\n  const { connection } = useConnection();\n\n  const { balance } = useSolanaBalance();\n  const [copied, setCopied] = useState(false);\n  const [depositAmount, setDepositAmount] = useState(0);\n  const [symbolType, setSymbolType] = useState(\"SOL\");\n\n  const user = useSelector((state: RootState) => state.auth.user);\n\n  console.log(\"balance\", balance);\n\n  const depositFromWallet = useCallback(() => {\n    if (!publicKey) {\n      toast.error(\n        <NotificationToastify message=\"Wallet not connected!\" />,\n        defaultToastOptions\n      );\n      return;\n    }\n    TransactionAPI.depositFromWallet(\n      publicKey,\n      depositAmount,\n      connection,\n      sendTransaction\n    );\n  }, [publicKey, depositAmount, connection, sendTransaction]);\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSymbolType(event.target.value);\n  };\n\n  const handleChange = (event: any) => {\n    setDepositAmount(event.target.value);\n  };\n\n  const handleCopied = () => {\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000);\n  };\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Container maxWidth=\"sm\">\n        <Card sx={{ minWidth: 250, marginTop: 10 }}>\n          <Stack\n            sx={{ justifyContent: \"center\", alignItems: \"center\" }}\n            direction=\"row\"\n          >\n            <CardContent style={{ width: \"45%\" }}>\n              <QRCode\n                value={publicKey?.toString() || \"\"}\n                style={{ width: \"100%\", height: 200 }}\n              />\n              <Stack direction=\"row\" spacing={1} marginTop={2}>\n                <TextField\n                  id=\"outlined-read-only-input\"\n                  label=\"your address\"\n                  value={maskedAddress(publicKey?.toString() || \"\")}\n                  defaultValue=\"\"\n                  style={{ width: 190 }}\n                  InputProps={{\n                    readOnly: true,\n                  }}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                />\n                <Stack justifyContent=\"center\" alignItems=\"center\">\n                  <CopyToClipboard\n                    text={publicKey?.toString() || \"\"}\n                    onCopy={handleCopied}\n                  >\n                    <Tooltip title={copied ? \"Copied\" : \"Copy\"}>\n                      <IconButton>\n                        <ContentCopyIcon />\n                      </IconButton>\n                    </Tooltip>\n                  </CopyToClipboard>\n                </Stack>\n              </Stack>\n            </CardContent>\n            <CardContent>\n              <Typography variant=\"h5\" textAlign=\"center\">\n                Your balance!\n              </Typography>\n              <Typography textAlign=\"center\" color=\"#33a382\">\n                {balance.sol\n                  ? \"Solana: \" + balance.sol.toFixed(5) + \" SOL\"\n                  : \"Loading..\"}\n              </Typography>\n              <Typography textAlign=\"center\" color=\"#33a382\">\n                {balance.xmt\n                  ? \"X-Mas Token:\" + balance.xmt + \" XMT\"\n                  : \"Loading..\"}\n              </Typography>\n              {/* \n              <TextField\n                id=\"outlined-select-currency\"\n                select\n                value={symbolType}\n                onChange={handleSelectChange}\n                helperText=\"Please select your currency want to deposit\"\n              >\n                <MenuItem key=\"SOL\" value=\"SOL\">\n                  SOL\n                </MenuItem>\n                <MenuItem key=\"XMT\" value=\"XMT\">\n                  XMT\n                </MenuItem>\n              </TextField>\n              <TextField\n                sx={{ marginTop: 5 }}\n                fullWidth\n                id=\"outlined-basic\"\n                label=\"amount\"\n                helperText=\"Fast deposit with your connected wallet\"\n                variant=\"outlined\"\n                value={depositAmount}\n                onChange={handleChange}\n                defaultValue={0}\n                type=\"number\"\n              /> */}\n\n              {/* <CardActions sx={{ marginBottom: 2 }}>\n                <Button\n                  variant=\"contained\"\n                  color=\"success\"\n                  fullWidth\n                  size=\"large\"\n                  disabled={!publicKey}\n                  onClick={depositFromWallet}\n                >\n                  <Typography variant=\"body2\" color=\"#fff\">\n                    Apply\n                  </Typography>\n                </Button>\n              </CardActions> */}\n            </CardContent>\n          </Stack>\n        </Card>\n      </Container>\n    </React.Fragment>\n  );\n};\n","import { Link, makeStyles } from '@material-ui/core';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport { useSnackbar, VariantType } from 'notistack';\nimport { useCallback } from 'react';\n\nconst useStyles = makeStyles({\n    notification: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    link: {\n        color: '#ffffff',\n        display: 'flex',\n        alignItems: 'center',\n        marginLeft: 16,\n        textDecoration: 'underline',\n        '&:hover': {\n            color: '#000000',\n        },\n    },\n    icon: {\n        fontSize: 20,\n        marginLeft: 8,\n    },\n});\n\nexport function useNotify() {\n    const styles = useStyles();\n    const { enqueueSnackbar } = useSnackbar();\n\n    return useCallback(\n        (variant: VariantType, message: string, signature?: string) => {\n            enqueueSnackbar(\n                <span className={styles.notification}>\n                    {message}\n                    {signature && (\n                        <Link\n                            className={styles.link}\n                            href={`https://explorer.solana.com/tx/${signature}?cluster=devnet`}\n                            target=\"_blank\"\n                        >\n                            Transaction\n                            <LaunchIcon className={styles.icon} />\n                        </Link>\n                    )}\n                </span>,\n                { variant }\n            );\n        },\n        [enqueueSnackbar, styles]\n    );\n}","import { Button } from \"@material-ui/core\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport { LAMPORTS_PER_SOL, TransactionSignature } from \"@solana/web3.js\";\nimport { FC, useCallback } from \"react\";\nimport { useNotify } from \"../hooks/useNotification\";\nimport { toast } from \"react-toastify\";\nimport NotificationToastify from \"../components/NotificationToastify\";\nimport { defaultToastOptions } from \"../constants/toastifyOptions\";\n\nexport const RequestAirdropBtn: FC = () => {\n  const { connection } = useConnection();\n  const { publicKey } = useWallet();\n  console.log(\"publicKey\", !publicKey);\n  const notify = useNotify();\n\n  const onClick = useCallback(async () => {\n    if (!publicKey) {\n      toast.error(\n        <NotificationToastify message=\"Wallet not connected!\" />,\n        defaultToastOptions\n      );\n      return;\n    }\n\n    let signature: TransactionSignature = \"\";\n    try {\n      signature = await connection.requestAirdrop(publicKey, LAMPORTS_PER_SOL);\n      toast.info(\n        <NotificationToastify\n          signature={signature}\n          message=\"Airdrop requested\"\n        />,\n        defaultToastOptions\n      );\n      await connection.confirmTransaction(signature, \"processed\");\n      toast.success(\n        <NotificationToastify\n          signature={signature}\n          message=\"Airdrop successful!\"\n        />,\n        defaultToastOptions\n      );\n    } catch (error: any) {\n      toast.error(\n        <NotificationToastify\n          signature={signature}\n          message={`Airdrop failed! ${error?.message}`}\n        />,\n        defaultToastOptions\n      );\n    }\n  }, [publicKey, notify, connection]);\n\n  return (\n    <Button\n      variant=\"contained\"\n      color=\"secondary\"\n      onClick={onClick}\n      disabled={!publicKey}\n    >\n      Request Airdrop\n    </Button>\n  );\n};\n","import React, { FC } from \"react\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport Container from \"@mui/material/Container\";\n\n\nimport { Stack } from \"@mui/material\";\nimport { RequestAirdropBtn } from \"../../components/RequestAirdropBtn\";\n\nexport const SettingContainer: FC = () => {\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Container maxWidth=\"sm\">\n        <Stack\n          sx={{ minWidth: 275, marginTop: 10, justifyContent: \"center\" }}\n          direction=\"row\"\n          spacing={2}\n        >\n          <RequestAirdropBtn />\n        </Stack>\n      </Container>\n    </React.Fragment>\n  );\n};\n","import React, { FC, useState } from \"react\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport Container from \"@mui/material/Container\";\n\nimport { mintNFT } from \"../../utils/nftCreation\";\nimport {\n  Creator,\n  IMetadataExtension,\n  MetadataFile,\n} from \"../../model/metadata\";\nimport {\n  Upload,\n  Typography,\n  Button,\n  Row,\n  Col,\n  Input,\n  InputNumber,\n  Spin,\n  Card,\n  Steps,\n  message,\n  Form,\n  Space,\n} from \"antd\";\nimport { InboxOutlined } from \"@ant-design/icons\";\n\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { connection } from \"../../utils\";\n// import { MetaDataJsonCategory } from \"@metaplex/js\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport {\n  LoadingOutlined,\n  MinusCircleOutlined,\n  PlusOutlined,\n} from \"@ant-design/icons\";\n\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\n\nconst { Dragger } = Upload;\nconst { Text } = Typography;\nconst { Step } = Steps;\n\nexport const CreateNFTContainer: FC = () => {\n  const wallet = useWallet();\n  const { publicKey } = wallet;\n\n  const [coverFile, setCoverFile] = useState<File | undefined>();\n  const [coverArtError, setCoverArtError] = useState<string>();\n  const [isSpinning, setIsSpinning] = useState<boolean>(false);\n  const [nftCreateProgress, setNFTcreateProgress] = useState<number>(0);\n\n  const [form] = Form.useForm();\n\n  const [attributes, setAttributes] = useState<IMetadataExtension>({\n    name: \"\",\n    symbol: \"\",\n    description: \"\",\n    external_url: \"\",\n    image: \"\",\n    animation_url: undefined,\n    attributes: undefined,\n    creators: [],\n    seller_fee_basis_points: 0,\n    properties: {\n      files: [],\n      category: \"image\",\n    },\n  });\n\n  const setIconForStep = (currentStep: number, componentStep: number) => {\n    if (currentStep === componentStep) {\n      return <LoadingOutlined />;\n    }\n    return null;\n  };\n\n  const mintNFTHandler = async (nftAttributes:any) => {\n    console.log(\"mintNFTHandler got called\");\n\n    if (!wallet || !publicKey) {\n      message.error(\"Please connect your wallet!\");\n      return;\n    }\n\n    if (!coverFile) {\n      message.error(\"Please enter your image!\");\n      return;\n    }\n\n    const ownerPublicKey = new PublicKey(publicKey).toBase58();\n    const selfCreator = new Creator({\n      address: ownerPublicKey,\n      verified: true,\n      share: 100,\n    });\n    const metadata = {\n      name: attributes.name,\n      symbol: attributes.symbol,\n      creators: [selfCreator],\n      description: attributes.description,\n      sellerFeeBasisPoints: 0,\n      image: coverFile?.name,\n      attributes: nftAttributes ? nftAttributes : undefined,\n      animation_url: \"\",\n      external_url: \"\",\n      properties: {\n        files: attributes.properties.files,\n        category: attributes.properties?.category,\n      },\n    };\n\n    console.log('metadata',metadata)\n    \n    try {\n      setIsSpinning(true);\n      await mintNFT(\n        connection,\n        wallet,\n        \"devnet\",\n        [coverFile],\n        metadata,\n        setNFTcreateProgress\n      );\n\n      message.success(\"NFT created successfully\");\n    } catch (e) {\n      setIsSpinning(false);\n    } finally {\n      setIsSpinning(false);\n    }\n  };\n\n  const handlerChange = (e: any) => {\n    console.log(\"e\", e);\n  };\n\n  return (\n    <>\n      <Spin\n        size=\"large\"\n        spinning={isSpinning}\n        tip={\n          <div\n            style={{\n              marginTop: 10,\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"center\",\n            }}\n          >\n            <Card className=\"dark-card\">\n              <Steps direction=\"vertical\" current={nftCreateProgress}>\n                <Step\n                  className={\"white-description\"}\n                  title=\"Minting\"\n                  description=\"Starting Mint Process\"\n                  icon={setIconForStep(nftCreateProgress, 0)}\n                />\n                <Step\n                  className={\"white-description\"}\n                  title=\"Preparing Assets\"\n                  icon={setIconForStep(nftCreateProgress, 1)}\n                />\n                <Step\n                  className={\"white-description\"}\n                  title=\"Signing Metadata Transaction\"\n                  description=\"Approve the transaction from your wallet\"\n                  icon={setIconForStep(nftCreateProgress, 2)}\n                />\n                <Step\n                  className={\"white-description\"}\n                  title=\"Sending Transaction to Solana\"\n                  description=\"This will take a few seconds.\"\n                  icon={setIconForStep(nftCreateProgress, 3)}\n                />\n                <Step\n                  className={\"white-description\"}\n                  title=\"Waiting for Initial Confirmation\"\n                  icon={setIconForStep(nftCreateProgress, 4)}\n                />\n                <Step\n                  className={\"white-description\"}\n                  title=\"Waiting for Final Confirmation\"\n                  icon={setIconForStep(nftCreateProgress, 5)}\n                />\n                <Step\n                  className={\"white-description\"}\n                  title=\"Uploading to Arweave\"\n                  icon={setIconForStep(nftCreateProgress, 6)}\n                />\n                <Step\n                  className={\"white-description\"}\n                  title=\"Updating Metadata\"\n                  icon={setIconForStep(nftCreateProgress, 7)}\n                />\n                <Step\n                  className={\"white-description\"}\n                  title=\"Signing Token Transaction\"\n                  description=\"Approve the final transaction from your wallet\"\n                  icon={setIconForStep(nftCreateProgress, 8)}\n                />\n              </Steps>\n            </Card>\n          </div>\n        }\n      >\n        <Row\n          style={{ padding: 15, paddingTop: 50, paddingBottom: 50 }}\n          justify=\"space-around\"\n        >\n          <Col span={24} xs={8} lg={10} md={10}>\n            <Dragger\n              accept=\".png,.jpg,.gif,.mp4,.svg\"\n              style={{\n                padding: 20,\n                background: \"rgba(255, 255, 255, 0.08)\",\n                maxHeight: 300,\n              }}\n              multiple={false}\n              fileList={coverFile ? [coverFile as any] : []}\n              customRequest={(info) => {\n                // dont upload files here, handled outside of the control\n                info?.onSuccess?.({}, null as any);\n              }}\n              onChange={async (info) => {\n                const file = info.file.originFileObj;\n                console.log(\"file\", file);\n                if (!file) {\n                  return;\n                }\n\n                const sizeKB = file.size / 1024;\n\n                if (sizeKB < 25) {\n                  setCoverArtError(\n                    `The file ${file.name} is too small. It is ${\n                      Math.round(10 * sizeKB) / 10\n                    }KB but should be at least 25KB.`\n                  );\n                  return;\n                }\n                setAttributes({\n                  ...attributes,\n                  properties: {\n                    ...attributes.properties,\n                    files: [file].map((f) => {\n                      console.log(f, typeof f);\n                      const uri = typeof f === \"string\" ? f : f?.name || \"\";\n                      const type =\n                        typeof f === \"string\" || !f\n                          ? \"unknown\"\n                          : f.type || \"unknown\";\n                      return {\n                        uri,\n                        type,\n                      } as MetadataFile;\n                    }),\n                  },\n                });\n\n                setCoverFile(file);\n                setCoverArtError(undefined);\n              }}\n              onDrop={(e) => {\n                console.log(\"Dropped files\", e.dataTransfer.files);\n              }}\n            >\n              <div className=\"ant-upload-drag-icon\">\n                <h3 style={{ fontWeight: 700 }}>\n                  Upload your cover image (PNG, JPG, GIF, SVG)\n                </h3>\n              </div>\n              {coverArtError ? (\n                <Text type=\"danger\">{coverArtError}</Text>\n              ) : (\n                <p className=\"ant-upload-text\" style={{ color: \"#6d6d6d\" }}>\n                  Drag and drop, or click to browse\n                </p>\n              )}\n            </Dragger>\n          </Col>\n          <Col className=\"section\" span={24} xs={16} lg={12} md={12}>\n            <label className=\"action-field\">\n              <span className=\"field-title\">Title</span>\n              <Input\n                autoFocus\n                className=\"input\"\n                style={{\n                  borderRadius: 8,\n                  padding: 10,\n                }}\n                placeholder=\"Max 50 characters\"\n                maxLength={50}\n                allowClear\n                value={attributes.name}\n                onChange={(info) =>\n                  setAttributes({\n                    ...attributes,\n                    name: info.target.value,\n                  })\n                }\n              />\n            </label>\n            <label className=\"action-field\">\n              <span className=\"field-title\">Symbol</span>\n              <Input\n                className=\"input\"\n                placeholder=\"Max 10 characters\"\n                maxLength={10}\n                allowClear\n                style={{\n                  borderRadius: 8,\n                  padding: 10,\n                }}\n                value={attributes.symbol}\n                onChange={(info) =>\n                  setAttributes({\n                    ...attributes,\n                    symbol: info.target.value,\n                  })\n                }\n              />\n            </label>\n\n            <label className=\"action-field\">\n              <span className=\"field-title\">Description</span>\n              <Input.TextArea\n                className=\"input textarea\"\n                placeholder=\"Max 500 characters\"\n                maxLength={500}\n                style={{\n                  borderRadius: 8,\n                  padding: 10,\n                  minHeight: 100,\n                }}\n                value={attributes.description}\n                onChange={(info) =>\n                  setAttributes({\n                    ...attributes,\n                    description: info.target.value,\n                  })\n                }\n                allowClear\n              />\n            </label>\n            <label className=\"action-field\">\n              <span className=\"field-title\">Maximum Supply</span>\n              <InputNumber\n                placeholder=\"Quantity\"\n                style={{\n                  borderRadius: 8,\n                  padding: 10,\n                  width: \"100%\",\n                  height: 50,\n                  display: \"flex\",\n                }}\n                onChange={(val: number) => {\n                  setAttributes({\n                    ...attributes,\n                    properties: {\n                      ...attributes.properties,\n                      maxSupply: val,\n                    },\n                  });\n                }}\n                className=\"royalties-input\"\n              />\n            </label>\n            <label className=\"action-field\">\n              <span className=\"field-title\">Attributes</span>\n            </label>\n            <Form\n              onChange={handlerChange}\n              name=\"dynamic_attributes\"\n              form={form}\n              autoComplete=\"off\"\n            >\n              <Form.List name=\"attributes\">\n                {(fields, { add, remove }) => (\n                  <>\n                    {fields.map(({ key, name }) => (\n                      <Space key={key} align=\"baseline\">\n                        <Form.Item name={[name, \"trait_type\"]} hasFeedback>\n                          <Input placeholder=\"trait_type (Optional)\" />\n                        </Form.Item>\n                        <Form.Item\n                          name={[name, \"value\"]}\n                          rules={[{ required: true, message: \"Missing value\" }]}\n                          hasFeedback\n                        >\n                          <Input placeholder=\"value\" />\n                        </Form.Item>\n                        <Form.Item name={[name, \"display_type\"]} hasFeedback>\n                          <Input placeholder=\"display_type (Optional)\" />\n                        </Form.Item>\n                        <MinusCircleOutlined onClick={() => remove(name)} />\n                      </Space>\n                    ))}\n                    <Form.Item>\n                      <Button\n                        type=\"dashed\"\n                        onClick={() => add()}\n                        block\n                        icon={<PlusOutlined />}\n                      >\n                        Add attribute\n                      </Button>\n                    </Form.Item>\n                  </>\n                )}\n              </Form.List>\n            </Form>\n          </Col>\n        </Row>\n        <Row justify=\"center\">\n          <Button\n            size=\"large\"\n            style={{ width: \"95%\" }}\n            onClick={() => {\n             \n              form.validateFields().then((values) => {\n                let nftAttributes = values.attributes;\n                // value is number if possible\n                for (const nftAttribute of nftAttributes || []) {\n                  const newValue = Number(nftAttribute.value);\n                  if (!isNaN(newValue)) {\n                    nftAttribute.value = newValue;\n                  }\n                }\n                console.log(\"Adding NFT attributes:\", nftAttributes);\n                setAttributes({\n                  ...attributes,\n                  attributes: nftAttributes,\n                });\n                mintNFTHandler(nftAttributes);\n              });     \n            }}\n            type=\"primary\"\n          >\n            Mint NFT\n          </Button>\n        </Row>\n      </Spin>\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport {\n  AppBar,\n  Toolbar,\n  CssBaseline,\n  useTheme,\n  useMediaQuery,\n} from \"@mui/material\";\nimport { makeStyles, ThemeProvider } from \"@mui/styles\";\nimport { Link, NavLink, useResolvedPath, useMatch } from \"react-router-dom\";\nimport type { LinkProps } from \"react-router-dom\";\nimport {\n  WalletDisconnectButton,\n  WalletMultiButton,\n} from \"@solana/wallet-adapter-react-ui\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../store\";\nimport DrawerComponent from \"./Drawer\";\nimport { Typography, Avatar, Popover, Button, Form, Input } from \"antd\";\nimport { useAnchorWallet, useWallet } from \"@solana/wallet-adapter-react\";\nimport { clearUser, saveUser } from \"../slices/authSlice\";\nimport { Provider } from \"@project-serum/anchor\";\nimport { connection, getProgram } from \"../utils\";\nimport { fetchUser, updateUser } from \"../api/auth\";\n\nconst { Title, Text } = Typography;\n\nconst useStyles = makeStyles((theme) => ({\n  navlinks: {\n    display: \"flex\",\n    flexGrow: \"1\",\n    justifyContent: \"center\",\n  },\n  logo: {\n    // flexGrow: \"1\",\n    cursor: \"pointer\",\n  },\n  link: {\n    textDecoration: \"none\",\n    color: \"#828693\",\n    fontSize: \"20px\",\n    marginLeft: 50,\n    transition: \"all 0.3s ease 0s\",\n    \"&:hover\": {\n      color: \"#fff\",\n    },\n  },\n}));\n\nfunction Navbar() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const user = useSelector((state: RootState) => state.auth.user);\n  const anchorWallet = useAnchorWallet();\n  const { connected, connecting, disconnecting } = useWallet();\n  const dispatch = useDispatch();\n  const [popoverVisible, setPopoverVisible] = useState(false);\n\n  const onFinish = async (values: any) => {\n    if (!anchorWallet) {\n      return;\n    }\n    await updateUser(anchorWallet, anchorWallet.publicKey, values.username);\n    setPopoverVisible(false);\n    await getUser();\n  };\n\n  const handleVisibleChange = (visible) => {\n    setPopoverVisible(visible);\n  };\n\n  const onFinishFailed = (errorInfo: any) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n  const content = (\n    <Form\n      autoComplete=\"off\"\n      onFinish={onFinish}\n      onFinishFailed={onFinishFailed}\n    >\n      <Form.Item name=\"username\">\n        <Input style={{ width: 200 }} placeholder=\"enter your new username\" />\n      </Form.Item>\n      <Form.Item>\n        <Button style={{ width: \"100%\" }} type=\"primary\" htmlType=\"submit\">\n          Update\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n\n  const getUser = async () => {\n    if (!anchorWallet) {\n      return;\n    }\n    const user = await fetchUser(anchorWallet);\n    dispatch(saveUser(user));\n  };\n\n  useEffect(() => {\n    if (connected) {\n      getUser();\n    }\n  }, [connected]);\n\n  useEffect(() => {\n    if (disconnecting) {\n      dispatch(clearUser());\n    }\n  }, [disconnecting]);\n\n  const CustomLink = ({ children, to, ...props }: LinkProps) => {\n    let resolved = useResolvedPath(to);\n    let match = useMatch({ path: resolved.pathname, end: true });\n\n    return (\n      <div>\n        <Link\n          style={{ color: match ? \"#ffffff\" : \"#828693\" }}\n          to={to}\n          className={classes.link}\n          {...props}\n        >\n          {children}\n        </Link>\n      </div>\n    );\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <AppBar position=\"static\" sx={{ backgroundColor: \"#131a35\" }}>\n        <CssBaseline />\n        <Toolbar>\n          <Title\n            level={2}\n            style={{ color: \"#ffffff\" }}\n            className={classes.logo}\n          >\n            S3Corp\n          </Title>\n\n          <div className={classes.navlinks}>\n            <CustomLink to=\"/wallet\">Wallet</CustomLink>\n            <CustomLink to=\"/settings\">Settings</CustomLink>\n            <CustomLink to=\"/createNFT/0\">Create NFT</CustomLink>\n            <CustomLink to=\"/staking\">Staking</CustomLink>\n            <CustomLink to=\"/metaplex\">Market</CustomLink>\n            <CustomLink to=\"/gameplay\">Gameplay</CustomLink>\n            <CustomLink to=\"/feedback\">Feedback</CustomLink>\n          </div>\n          <>\n            {user && (\n              <div style={{ marginRight: 5 }}>\n                <Avatar\n                  src={user.avatar}\n                  size={40}\n                  style={{ backgroundColor: \"#ffffff\" }}\n                />\n                <Popover\n                  onVisibleChange={handleVisibleChange}\n                  visible={popoverVisible}\n                  placement=\"bottom\"\n                  content={content}\n                  trigger=\"click\"\n                >\n                  <Button type=\"text\">\n                    <Text\n                      strong\n                      style={{\n                        color: \"#ffffff\",\n                        textAlign: \"center\",\n                        marginLeft: 5,\n                      }}\n                    >\n                      {user.name}\n                    </Text>\n                  </Button>\n                </Popover>\n              </div>\n            )}\n            <WalletMultiButton />\n          </>\n        </Toolbar>\n      </AppBar>\n    </ThemeProvider>\n  );\n}\nexport default Navbar;\n","import React from \"react\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport Typography from \"@mui/material/Typography\";\nimport CardHeader from \"@mui/material/CardHeader\";\n\nimport {\n  Box,\n  CardActionArea,\n  CardActions,\n  CssBaseline,\n  Grid,\n  Skeleton,\n} from \"@mui/material\";\nconst CardSkeleton = ({ displayNumber = 5 }: { displayNumber?: number }) => {\n  const list = Array(displayNumber);\n  console.log(\"list\", list);\n  return (\n    <>\n      {[...list].map((item, index) => (\n        <Grid key={index} item xs={6} lg={2.4} xl={2.4}>\n          <Card\n            sx={{\n              maxWidth: 345,\n              bgcolor: \"#282828\",\n              padding: 2,\n              borderRadius: 2,\n            }}\n          >\n            <CardHeader\n              avatar={\n                <Skeleton\n                  animation=\"wave\"\n                  variant=\"circular\"\n                  width={50}\n                  height={50}\n                  sx={{ bgcolor: \"grey.800\" }}\n                />\n              }\n              title={\n                <Skeleton\n                  animation=\"wave\"\n                  height={15}\n                  width=\"80%\"\n                  sx={{ bgcolor: \"grey.800\" }}\n                />\n              }\n            />\n            <CardActionArea>\n              <Box component=\"div\" sx={{ bgcolor: \"#333333\", borderRadius: 3 }}>\n                <Skeleton\n                  sx={{ height: 140, width: 250, bgcolor: \"grey.800\",borderRadius: 3 }}\n                  animation=\"wave\"\n                  variant=\"rectangular\"\n                />\n              </Box>\n              <CardContent sx={{ height: 100 }}>\n                <Skeleton\n                  height={15}\n                  style={{ marginBottom: 6 }}\n                  sx={{ bgcolor: \"grey.800\" }}\n                />\n                <Skeleton\n                  sx={{ bgcolor: \"grey.800\" }}\n                  height={15}\n                  width=\"80%\"\n                />\n              </CardContent>\n            </CardActionArea>\n          </Card>\n        </Grid>\n      ))}\n    </>\n  );\n};\n\nexport default CardSkeleton;\n","import React, { FC, useEffect, useState } from \"react\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\n\nimport { Connection } from \"@metaplex/js\";\nimport {\n  MetadataData,\n  Metadata,\n} from \"@metaplex-foundation/mpl-token-metadata\";\n\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport Typography from \"@mui/material/Typography\";\nimport CardHeader from \"@mui/material/CardHeader\";\nimport { toast } from \"react-toastify\";\nimport NotificationToastify from \"../../components/NotificationToastify\";\nimport { defaultToastOptions } from \"../../constants/toastifyOptions\";\n\nimport {\n  CardActionArea,\n  CssBaseline,\n  Grid,\n  Container,\n  Box,\n  Avatar,\n  CardActions,\n  Button,\n  Stack,\n} from \"@mui/material\";\nimport axios from \"axios\";\nimport { IAwareNFT } from \"./model/awareInterce\";\nimport { CardSkeleton } from \"../../components\";\nimport { AccountAPI, NFT } from \"../../api\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\n\nexport const MetaplexContainer: FC = () => {\n  const wallet = useWallet();\n  const { publicKey, sendTransaction } = wallet;\n  const connection = new Connection(\"devnet\");\n  const [ownedMetadata, setOwnedMetadata] = useState<MetadataData[]>([]);\n  const [NFTList, setNFTList] = useState<IAwareNFT[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  function fetchData(URL: any) {\n    return axios\n      .get(URL)\n      .then((response) => response.data)\n      .catch((error) => console.log(error));\n  }\n\n  const updateMetadata = () => {};\n\n  const init = async () => {\n    setLoading(true);\n    try {\n      const defaultAccount = AccountAPI.getDefaultAccount();\n\n      const ownedMetadata = await Metadata.findDataByOwner(\n        connection,\n        defaultAccount.publicKey\n      );\n\n      const awareUri = await ownedMetadata.map((item) => item.data.uri);\n\n      const ownedFullMetadata: IAwareNFT[] = await Promise.all(\n        awareUri.map(fetchData)\n      );\n\n      console.log(\"ownedMetadata\", ownedMetadata);\n      console.log(\"ownedFullMetadata\", ownedFullMetadata);\n\n      if (ownedFullMetadata) {\n        setNFTList(ownedFullMetadata);\n        setOwnedMetadata(ownedMetadata);\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const buyNFT = (symbol: string) => {\n    if (!publicKey) {\n      toast.error(\n        <NotificationToastify message=\"Wallet not connected!\" />,\n        defaultToastOptions\n      );\n      // throw new WalletNotConnectedError();\n      return;\n    }\n\n    let mint_string_address = ownedMetadata.find(\n      (item) => item.data.symbol === symbol\n    )?.mint;\n\n    let mint_address = new PublicKey(mint_string_address || \"\");\n\n    NFT.buyNFT(publicKey, mint_address, sendTransaction);\n  };\n\n  const NFTCardItem = ({ item }: { item: IAwareNFT }) => {\n    return (\n      <Card\n        sx={{\n          maxWidth: 345,\n          bgcolor: \"#282828\",\n          pr: 2,\n          pl: 2,\n          borderRadius: 2,\n        }}\n      >\n        <CardHeader\n          avatar={\n            <Avatar\n              alt=\"SOLANA\"\n              src=\"https://vectorlogo4u.com/wp-content/uploads/2021/09/solana-logo-vector-01.png\"\n              sx={{ width: 56, height: 56 }}\n            />\n          }\n          title={\n            <Typography\n              sx={{\n                fontSize: 18,\n                color: \"#ffffff\",\n                fontWeight: 600,\n              }}\n              component=\"div\"\n            >\n              {item.symbol}\n            </Typography>\n          }\n        ></CardHeader>\n        <CardActionArea>\n          <Box component=\"div\" sx={{ bgcolor: \"#333333\", borderRadius: 3 }}>\n            <CardMedia\n              sx={{ borderRadius: 3 }}\n              width={250}\n              height={140}\n              component=\"img\"\n              image={item.image}\n              alt=\"failed\"\n            />\n          </Box>\n\n          <CardContent sx={{ height: 130 }}>\n            <Typography\n              gutterBottom\n              sx={{\n                fontSize: 24,\n                color: \"#ffffff\",\n                fontWeight: 600,\n                display: \"-webkit-box\",\n                overflow: \"hidden\",\n                WebkitBoxOrient: \"vertical\",\n                WebkitLineClamp: 1,\n              }}\n              component=\"div\"\n            >\n              {item.name}\n            </Typography>\n            <Typography\n              gutterBottom\n              sx={{\n                fontSize: 16,\n                color: \"grey.500\",\n                fontWeight: 400,\n                display: \"-webkit-box\",\n                overflow: \"hidden\",\n                WebkitBoxOrient: \"vertical\",\n                WebkitLineClamp: 2,\n              }}\n              component=\"div\"\n            >\n              {item?.description}\n            </Typography>\n            <Stack direction=\"row\" spacing={1}>\n              <Typography\n                sx={{\n                  fontSize: 16,\n                  color: \"#fff\",\n                  fontWeight: 400,\n                }}\n                component=\"div\"\n              >\n                0.49 SOL\n              </Typography>\n              <Typography\n                sx={{\n                  fontSize: 14,\n                  color: \"grey.500\",\n                  fontWeight: 400,\n                }}\n                component=\"div\"\n              >\n                $73.68\n              </Typography>\n            </Stack>\n          </CardContent>\n        </CardActionArea>\n        <CardActions>\n          <Button\n            onClick={() => buyNFT(item.symbol)}\n            variant=\"outlined\"\n            color=\"success\"\n            size=\"medium\"\n            sx={{ marginTop: 1 }}\n          >\n            <Typography\n              sx={{\n                fontSize: 14,\n                fontWeight: 500,\n              }}\n            >\n              Buy\n            </Typography>\n          </Button>\n        </CardActions>\n      </Card>\n    );\n  };\n\n  useEffect(() => {\n    init();\n  }, []);\n\n  return (\n    <>\n      <CssBaseline />\n      <Container maxWidth=\"xl\" sx={{ pt: 3, display: \"flex\" }}>\n        <Grid container spacing={3}>\n          {NFTList.map((item: IAwareNFT, index) => (\n            <Grid key={index} item xs={6} lg={2.4} xl={2.4}>\n              <NFTCardItem item={item} />\n            </Grid>\n          ))}\n          {loading && <CardSkeleton displayNumber={10} />}\n        </Grid>\n      </Container>\n    </>\n  );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport { useWallet, useConnection } from \"@solana/wallet-adapter-react\";\nimport {\n  Button,\n  Container,\n  CssBaseline,\n  Stack,\n  Typography,\n  TextField,\n} from \"@mui/material\";\nimport { Staking } from \"../../api\";\nimport NotificationToastify from \"../../components/NotificationToastify\";\nimport { defaultToastOptions } from \"../../constants/toastifyOptions\";\nimport { toast } from \"react-toastify\";\nimport { useCallback } from \"react\";\n\nexport const StakingContainer: FC = () => {\n  const wallet = useWallet();\n  const { connection } = useConnection();\n  const { publicKey, signTransaction, sendTransaction } = wallet;\n  const [stakeAmount, setStakeAmount] = useState(0);\n\n  useEffect(() => {}, []);\n\n  const handleChangeStakeAmount = (event: any) => {\n    setStakeAmount(event.target.value);\n  };\n\n  const handleStake = useCallback(() => {\n    if (!publicKey) {\n      toast.error(\n        <NotificationToastify message=\"Wallet not connected!\" />,\n        defaultToastOptions\n      );\n      return;\n    }\n\n    Staking.stakingConnection(publicKey, sendTransaction, stakeAmount);\n  }, [stakeAmount, publicKey]);\n\n  const handleStateOfStake = () => {\n    Staking.getStakeActivation();\n  };\n\n\n  return (\n    <Container maxWidth=\"sm\">\n      <Stack direction=\"column\" spacing={2}>\n        <TextField\n          sx={{ marginTop: 2 }}\n          fullWidth\n          id=\"outlined-basic\"\n          label=\"amount\"\n          variant=\"outlined\"\n          value={stakeAmount}\n          onChange={handleChangeStakeAmount}\n          defaultValue={0}\n          type=\"number\"\n        />\n        <Button color=\"success\" variant=\"contained\" onClick={handleStake}>\n          <Typography>Click to stake</Typography>\n        </Button>\n\n        <Button\n          variant=\"contained\"\n          size=\"medium\"\n          color=\"info\"\n          onClick={handleStateOfStake}\n        >\n          <Typography>get state of staking</Typography>\n        </Button>\n      </Stack>\n    </Container>\n  );\n};\n","import React,{FC} from 'react';\n\nexport const Error: FC = () => {\n\n    return (\n        <div>\n            <h1>ERROR: PAGE NOT FOUND!!!</h1>\n        </div>\n    )\n}","import { Keypair, PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport { connection, getProgram } from \"../utils\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { Wallet as AnchorWallet } from \"@project-serum/anchor/dist/cjs/provider\";\nimport { getUserKey } from \"../helper\";\nimport { message } from \"antd\";\n\nconst FEEDBACK_KEY = new PublicKey(\n  \"DufRVTe36fs8VGo9EKkqaPgknV2hY9R1QUJVZz3cFRRW\"\n);\n\nexport async function initFeedback(\n  anchorWallet: AnchorWallet,\n  walletKey: PublicKey\n) {\n  const provider = new anchor.Provider(connection, anchorWallet, {});\n  const program = getProgram(provider);\n  try {\n    const feedback: any = await program.account.feedbackState.fetch(\n      FEEDBACK_KEY\n    );\n    console.log(\"feedback\", feedback.currentPostKey.toString());\n    return feedback;\n  } catch {\n    const feedbackAccount = Keypair.generate();\n    const genesisPostAccount = Keypair.generate();\n\n    await program.rpc.initFeedback({\n      accounts: {\n        authority: walletKey,\n        systemProgram: SystemProgram.programId,\n        feedbackAccount: feedbackAccount.publicKey,\n        genesisPostAccount: genesisPostAccount.publicKey,\n      },\n      signers: [feedbackAccount, genesisPostAccount],\n    });\n\n    const feedback = await program.account.feedbackState.fetch(\n      feedbackAccount.publicKey\n    );\n\n    console.log(\"Blog pubkey: \", feedbackAccount.publicKey.toString());\n    return feedback;\n  }\n}\n\nexport const createPost = async (\n  anchorWallet: AnchorWallet,\n  title: string,\n  content: string\n) => {\n  const provider = new anchor.Provider(connection, anchorWallet, {});\n  const program = getProgram(provider);\n  const postAccount = Keypair.generate();\n  const userAccount = getUserKey(provider.wallet.publicKey);\n  await program.rpc.createPost(title, content, {\n    accounts: {\n      feedbackAccount: FEEDBACK_KEY,\n      authority: provider.wallet.publicKey,\n      userAccount: userAccount.publicKey,\n      postAccount: postAccount.publicKey,\n      systemProgram: SystemProgram.programId,\n    },\n    signers: [postAccount],\n  });\n  message.success(\"Your feedback has been sent\");\n};\n","import React, { FC, useState, useEffect, useCallback } from \"react\";\nimport {\n  Form,\n  Input,\n  Button,\n  Row,\n  Col,\n  Typography,\n  Avatar,\n  message,\n  Card,\n  Layout,\n} from \"antd\";\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { createPost, initFeedback } from \"../../api/feedback\";\n\nconst { Title, Text } = Typography;\nconst { TextArea } = Input;\n\nexport const FeedBackContainer: FC = () => {\n  const anchorWallet = useAnchorWallet();\n  const [form] = Form.useForm();\n  const [loading, setLoading] = useState(false);\n\n  console.log(\"formRef\", form);\n\n  const onFinish = async (values: any) => {\n    if (!anchorWallet) {\n      message.error(\"please connect your wallet!\");\n      return;\n    }\n    if (!(values.title || values.content)) {\n      message.warning(\"please do not empty input\");\n      return;\n    }\n    setLoading(true);\n    try {\n      console.log(\"success\", values);\n      await createPost(anchorWallet, values.title, values.content);\n      // setLoading(false);\n    } catch (error) {\n      message.error(\"Your feedback was not sent!\");\n    } finally {\n      form.resetFields();\n      setLoading(false);\n    }\n  };\n\n  const onFinishFailed = (errorInfo: any) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  useEffect(() => {\n    if (anchorWallet) {\n      initFeedback(anchorWallet, anchorWallet.publicKey);\n    }\n  }, [anchorWallet]);\n\n  if (!anchorWallet) {\n    return (\n      <Row\n        style={{ padding: 15, paddingTop: 50, paddingBottom: 50 }}\n        justify=\"space-around\"\n      >\n        <Col span={24} xs={8} lg={10} md={10}>\n          <Title level={1}>Please connect your wallet first</Title>\n        </Col>\n      </Row>\n    );\n  }\n\n  return (\n    <Layout\n      style={{\n        height: \"100vh\",\n        background: \"linear-gradient(to right,#bdcbf8, #8fdfce)\",\n      }}\n    >\n      <Row\n        style={{\n          padding: 15,\n          paddingTop: 50,\n          paddingBottom: 50,\n        }}\n        justify=\"space-around\"\n      >\n        <Col span={24} xs={8} lg={10} md={10}>\n          <Card\n            bordered={true}\n            style={{ borderRadius: 8, backgroundColor: \"#e6f4ff\" }}\n          >\n            <Form\n              name=\"post\"\n              onFinish={onFinish}\n              onFinishFailed={onFinishFailed}\n              autoComplete=\"off\"\n              form={form}\n            >\n              <Form.Item\n                name=\"title\"\n                rules={[\n                  { required: true, message: \"Please input your title!\" },\n                ]}\n              >\n                <Input\n                  placeholder=\"Post title\"\n                  size=\"middle\"\n                  style={{ borderRadius: 8, marginBottom: 10 }}\n                />\n              </Form.Item>\n              <Form.Item\n                name=\"content\"\n                rules={[\n                  { required: true, message: \"Feedback can not be empty!\" },\n                ]}\n              >\n                <TextArea\n                  showCount\n                  placeholder=\"Input your feedback here\"\n                  maxLength={100}\n                  style={{ height: 60, borderRadius: 8, marginBottom: 10 }}\n                />\n              </Form.Item>\n              <Button\n                size=\"middle\"\n                type=\"primary\"\n                style={{\n                  width: \"100%\",\n                  backgroundColor: \"#7f8df5\",\n                  borderColor: \"#7c8ef3\",\n                }}\n                loading={loading}\n                htmlType=\"submit\"\n              >\n                <Text strong style={{ color: \"#ffffff\" }}>\n                  Post\n                </Text>\n              </Button>\n            </Form>\n          </Card>\n        </Col>\n      </Row>\n    </Layout>\n  );\n};\n","import React, { FC } from \"react\";\n\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Outlet,\n} from \"react-router-dom\";\nimport { HomeContainer } from \"../pages/home/home.container\";\nimport { WalletContainer } from \"../pages/wallet/wallet.container\";\nimport { WithdrawContainer } from \"../pages/withdraw/withdraw.container\";\nimport { DepositContainer } from \"../pages/deposit/deposit.container\";\nimport { SettingContainer } from \"../pages/settings/setting.container\";\nimport { CreateNFTContainer } from \"../pages/createNFT/createNFT.container\";\nimport { MetaplexContainer } from \"../pages/metaplex/metaplex.container\";\nimport { StakingContainer } from \"../pages/staking/staking.container\";\nimport { GameplayContainer } from \"../pages/game/game.container\";\nimport { GameStartContainer } from \"../pages/game/gamestart.container\";\n\nimport { Error } from \"../pages/error/error.container\";\nimport { Navbar } from \"../components\";\nimport { FeedBackContainer } from \"../pages/feedback/feedback.container\";\n\nexport const Navigation: FC = () => {\n  return (\n    <Router>\n      <Navbar />\n      <Routes>\n        <Route path=\"/\" element={<HomeContainer />} />\n        <Route path=\"/wallet\" element={<WalletContainer />}>\n          <Route path=\"withdraw\" element={<WithdrawContainer />} />\n          <Route path=\"deposit\" element={<DepositContainer />} />\n        </Route>\n        <Route path=\"/settings\" element={<SettingContainer />} />\n        <Route path=\"/staking\" element={<StakingContainer />} />\n        <Route path=\"/createNFT/:step\" element={<CreateNFTContainer />} />\n        <Route path=\"/metaplex\" element={<MetaplexContainer />} />\n        <Route path=\"/gameplay\" element={<GameplayContainer />}/>\n        <Route path=\"/gameplay/start\" element={<GameStartContainer />} />\n        <Route path=\"/feedback\" element={<FeedBackContainer />}/>\n        <Route path=\"*\" element={<Error />} />\n      </Routes>\n      <Outlet />\n    </Router>\n  );\n};\n","import { WalletAdapterNetwork, WalletError } from \"@solana/wallet-adapter-base\";\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { WalletModalProvider } from \"@solana/wallet-adapter-react-ui\";\nimport {\n  getLedgerWallet,\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletExtensionWallet,\n  getSolletWallet,\n  getTorusWallet,\n} from \"@solana/wallet-adapter-wallets\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport React, { FC, useCallback, useMemo } from \"react\";\nimport toast, { Toaster } from \"react-hot-toast\";\nimport { Navigation } from \"../router/Navigation\";\nimport { useNotify } from \"../hooks/useNotification\";\nimport { SnackbarProvider } from \"notistack\";\n\nexport const SolanaWalletProvider: FC = ({ children }) => {\n  const network = WalletAdapterNetwork.Devnet;\n  const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n  const notify = useNotify();\n\n  // @solana/wallet-adapter-wallets imports all the adapters but supports tree shaking --\n  // Only the wallets you want to support will be compiled into your application\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      // getSlopeWallet(),\n      // getSolflareWallet(),\n      // getTorusWallet(),\n      // getLedgerWallet(),\n      getSolletWallet({ network }),\n      // getSolletExtensionWallet({ network }),\n    ],\n    [network]\n  );\n\n  const onError = useCallback((error: WalletError) => {\n    notify(\n      \"error\",\n      error.message ? `${error.name}: ${error.message}` : error.name\n    );\n  }, []);\n\n  return (\n    <SnackbarProvider>\n      <ConnectionProvider endpoint={endpoint}>\n        <WalletProvider wallets={wallets} onError={onError} autoConnect>\n          <WalletModalProvider>{children}</WalletModalProvider>\n        </WalletProvider>\n      </ConnectionProvider>\n    </SnackbarProvider>\n  );\n};\n","import React from \"react\";\nimport { Navigation } from \"./router/Navigation\";\nimport { SnackbarProvider } from \"notistack\";\nimport { SolanaWalletProvider } from \"./providers/SolanaWalletProvider\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"@solana/wallet-adapter-react-ui/styles.css\";\nimport \"./App.less\";\n\nfunction App() {\n  return (\n    <SnackbarProvider>\n      <SolanaWalletProvider>\n        <Navigation />\n          <ToastContainer\n            theme=\"dark\"\n            position=\"bottom-left\"\n            autoClose={5000}\n            hideProgressBar\n            newestOnTop={false}\n            closeOnClick\n            rtl={false}\n            pauseOnFocusLoss\n            draggable\n            pauseOnHover\n            style={{width:360}}\n          />\n      </SolanaWalletProvider>\n    </SnackbarProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nexport interface CounterState {\n  value: number\n}\n\nconst initialState: CounterState = {\n  value: 0,\n}\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decrement: (state) => {\n      state.value -= 1\n    },\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload\n    },\n  },\n})\n\n// Action creators are generated for each case reducer function\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\n\nexport default counterSlice.reducer","import { configureStore } from \"@reduxjs/toolkit\";\nimport { combineReducers } from 'redux'\n\nimport authReducer from \"./slices/authSlice\";\nimport counterReducer from './slices/couterSlice'\n\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport localforage from \"localforage\";\nimport storage from 'redux-persist/lib/storage'\n\n\nconst rootReducer = combineReducers({\n  auth: authReducer,\n  counter:counterReducer,\n});\n\n\n\nconst persistConfig = {\n  key: \"root\",\n  storage:localforage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n});\n\nexport let persistor = persistStore(store);\n\n// export const store = configureStore({\n//   reducer: {\n//       auth:authReducer,\n//   },\n// })\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { store, persistor } from \"./store\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <PersistGate loading={null} persistor={persistor}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </PersistGate>\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}